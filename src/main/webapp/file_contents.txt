Contents of files with extensions: .ts, .vue

File: /Users/tenman/MMSE-App/src/main/webapp/app/app.vue
<template>
  <div id="app">
    <ribbon></ribbon>
    <div id="app-header">
      <jhi-navbar></jhi-navbar>
    </div>
    <div class="container-fluid">
      <div class="card jh-card">
        <router-view></router-view>
      </div>
      <b-modal id="login-page" hide-footer lazy>
        <template #modal-title>
          <span data-cy="loginTitle" id="login-title" v-text="t$('login.title')"></span>
        </template>
        <login-form></login-form>
      </b-modal>

      <jhi-footer></jhi-footer>
    </div>
  </div>
</template>

<script lang="ts" src="./app.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/main.ts
// The Vue build version to load with the `import` command
// (runtime-only or standalone) has been set in webpack.common with an alias.
import Vue, { computed, createApp, Directive, onMounted, provide, watch } from 'vue';
import { createPinia } from 'pinia';
import { useI18n } from 'vue-i18n';

import { useStore, useTranslationStore } from '@/store';
import { setupAxiosInterceptors } from '@/shared/config/axios-interceptor';

import App from './app.vue';
import router from './router';
import { initFortAwesome, initI18N } from './shared/config/config';
import { initBootstrapVue } from './shared/config/config-bootstrap-vue';
import JhiItemCountComponent from './shared/jhi-item-count.vue';
import JhiSortIndicatorComponent from './shared/sort/jhi-sort-indicator.vue';
import LoginService from './account/login.service';
import AccountService from './account/account.service';

import '../content/scss/global.scss';
import '../content/scss/vendor.scss';
import TranslationService from '@/locale/translation.service';
import 'intersection-observer';

const pinia = createPinia();

const vFocus: Directive = {
  mounted(element, binding) {
    // If the directive is used without a value or with a truthy value, focus the element
    if (binding.value === undefined || binding.value) {
      element.focus();
    }
  },
};

// jhipster-needle-add-entity-service-to-main-import - JHipster will import entities services here

initBootstrapVue(Vue);

Vue.configureCompat({
  MODE: 2,
  ATTR_FALSE_VALUE: 'suppress-warning',
  COMPONENT_FUNCTIONAL: 'suppress-warning',
  COMPONENT_V_MODEL: 'suppress-warning',
  CONFIG_OPTION_MERGE_STRATS: 'suppress-warning',
  CONFIG_WHITESPACE: 'suppress-warning',
  CUSTOM_DIR: 'suppress-warning',
  GLOBAL_EXTEND: 'suppress-warning',
  GLOBAL_MOUNT: 'suppress-warning',
  GLOBAL_PRIVATE_UTIL: 'suppress-warning',
  GLOBAL_PROTOTYPE: 'suppress-warning',
  GLOBAL_SET: 'suppress-warning',
  INSTANCE_ATTRS_CLASS_STYLE: 'suppress-warning',
  INSTANCE_CHILDREN: 'suppress-warning',
  INSTANCE_DELETE: 'suppress-warning',
  INSTANCE_DESTROY: 'suppress-warning',
  INSTANCE_EVENT_EMITTER: 'suppress-warning',
  INSTANCE_EVENT_HOOKS: 'suppress-warning',
  INSTANCE_LISTENERS: 'suppress-warning',
  INSTANCE_SCOPED_SLOTS: 'suppress-warning',
  INSTANCE_SET: 'suppress-warning',
  OPTIONS_BEFORE_DESTROY: 'suppress-warning',
  OPTIONS_DATA_MERGE: 'suppress-warning',
  OPTIONS_DESTROYED: 'suppress-warning',
  RENDER_FUNCTION: 'suppress-warning',
  WATCH_ARRAY: 'suppress-warning'
});

const i18n = initI18N();

const app = createApp({
  compatConfig: { MODE: 3 },
  components: { App },
  template: '<App/>',
  setup(_props, { emit }) {
    const loginService = new LoginService({ emit });
    provide('loginService', loginService);
    const store = useStore();
    const accountService = new AccountService(store);
    const i18n = useI18n();
    const translationStore = useTranslationStore();
    const translationService = new TranslationService(i18n);

    const changeLanguage = async (newLanguage: string) => {
      if (i18n.locale.value !== newLanguage) {
        await translationService.refreshTranslation(newLanguage);
        translationStore.setCurrentLanguage(newLanguage);
      }
    };

    provide('currentLanguage', i18n.locale);
    provide('changeLanguage', changeLanguage);

    watch(
      () => store.account,
      async value => {
        if (!translationService.getLocalStoreLanguage()) {
          await changeLanguage(value.langKey);
        }
      }
    );

    watch(
      () => translationStore.currentLanguage,
      value => {
        translationService.setLocale(value);
      }
    );

    onMounted(async () => {
      const lang = [translationService.getLocalStoreLanguage(), store.account?.langKey, navigator.language, 'en'].find(
        lang => lang && translationService.isLanguageSupported(lang)
      );
      await changeLanguage(lang);
    });

    router.beforeResolve(async (to, from, next) => {
      // Make sure login modal is closed
      loginService.hideLogin();

      if (!store.authenticated) {
        await accountService.update();
      }
      if (to.meta?.authorities && to.meta.authorities.length > 0) {
        const value = await accountService.hasAnyAuthorityAndCheckAuth(to.meta.authorities);
        if (!value) {
          if (from.path !== '/forbidden') {
            next({ path: '/forbidden' });
            return;
          }
        }
      }
      next();
    });

    setupAxiosInterceptors(
      error => {
        const url = error.response?.config?.url;
        const status = error.status || error.response.status;
        if (status === 401) {
          // Store logged out state.
          store.logout();
          if (!url.endsWith('api/account') && !url.endsWith('api/authenticate')) {
            // Ask for a new authentication
            loginService.openLogin();
            return;
          }
        }
        return Promise.reject(error);
      },
      error => {
        return Promise.reject(error);
      }
    );

    provide(
      'authenticated',
      computed(() => store.authenticated)
    );
    provide(
      'currentUsername',
      computed(() => store.account?.login)
    );

    provide('translationService', translationService);
    provide('accountService', accountService);
    // jhipster-needle-add-entity-service-to-main - JHipster will import entities services here
  },
});

initFortAwesome(app);

app.directive('focus', vFocus);

app
  .component('jhi-item-count', JhiItemCountComponent)
  .component('jhi-sort-indicator', JhiSortIndicatorComponent)
  .use(router)
  .use(pinia)
  .use(i18n)
  .mount('#app');


File: /Users/tenman/MMSE-App/src/main/webapp/app/app.component.ts
import { defineComponent, provide } from 'vue';
import { useI18n } from 'vue-i18n';
import Ribbon from '@/core/ribbon/ribbon.vue';
import JhiFooter from '@/core/jhi-footer/jhi-footer.vue';
import JhiNavbar from '@/core/jhi-navbar/jhi-navbar.vue';
import LoginForm from '@/account/login-form/login-form.vue';

import { useAlertService } from '@/shared/alert/alert.service';

import '@/shared/config/dayjs';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'App',
  components: {
    ribbon: Ribbon,
    'jhi-navbar': JhiNavbar,
    'login-form': LoginForm,
    'jhi-footer': JhiFooter
  },
  setup() {
    provide('alertService', useAlertService());

    return {
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/constants.ts
// Errors
export const PROBLEM_BASE_URL = 'https://www.jhipster.tech/problem';
export const EMAIL_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/email-already-used`;
export const LOGIN_ALREADY_USED_TYPE = `${PROBLEM_BASE_URL}/login-already-used`;


File: /Users/tenman/MMSE-App/src/main/webapp/app/declarations.d.ts
// These constants are injected via webpack environment variables.
// You can add more variables in webpack.common.js or in profile specific webpack.<dev|prod>.js files.
// If you change the values in the webpack config files, you need to re run webpack to update the application

declare const SERVER_API_URL: string;
declare const VERSION: string;
declare const I18N_HASH: string;


File: /Users/tenman/MMSE-App/src/main/webapp/app/shims-vue.d.ts
declare module '*.vue' {
  import { DefineComponent } from 'vue';
  const component: DefineComponent & any;
  export default component;
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/store.ts
import { useAccountStore as useStore } from '@/shared/config/store/account-store';
import { useTranslationStore } from '@/shared/config/store/translation-store';

export type AccountStore = ReturnType<typeof useStore>;
export { useStore };

export type TranslationStore = ReturnType<typeof useTranslationStore>;
export { useTranslationStore };


File: /Users/tenman/MMSE-App/src/main/webapp/app/locale/translation.service.ts
import axios from 'axios';
import { Composer } from 'vue-i18n';
import dayjs from 'dayjs';
import languages from '@/shared/config/languages';

export default class TranslationService {
  private i18n: Composer;
  private languages = languages();

  constructor(i18n: Composer) {
    this.i18n = i18n;
  }

  public async refreshTranslation(newLanguage: string) {
    if (this.i18n && !this.i18n.messages[newLanguage]) {
      const res = await axios.get(`i18n/${newLanguage}.json?_=${I18N_HASH}`);
      this.i18n.setLocaleMessage(newLanguage, res.data);
    }
  }

  public setLocale(lang: string) {
    dayjs.locale(lang);
    this.i18n.locale.value = lang;
    axios.defaults.headers.common['Accept-Language'] = lang;
    document.querySelector('html').setAttribute('lang', lang);
  }

  public isLanguageSupported(lang: string) {
    return Boolean(this.languages[lang]);
  }

  public getLocalStoreLanguage(): string | null {
    return localStorage.getItem('currentLanguage');
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/home/home.component.ts
import { ComputedRef, defineComponent, inject, onMounted, ref, watch } from 'vue';
import { useI18n } from 'vue-i18n';
import LoginService from '@/account/login.service';
import { IQuestion } from '@/shared/model/question.model';
import QuestionService from '@/entities/question/question.service';
import { Answer, IAnswer } from '@/shared/model/answer.model';
import { QuestionId } from '@/shared/model/enumerations/question-id.model';
import { QuestionType } from '@/shared/model/enumerations/question-type.model';

export default defineComponent({
  computed: {
    QuestionType() {
      return QuestionType;
    }
  },
  compatConfig: { MODE: 3 },
  setup() {
    const [
      loginService,
      authenticated,
      username,
      question,
      selectedAnswer,
      selectedAnswers,
      quizEndMessage,
      loading,
      isRecording,
      audioContext,
      recorder,
      stream,
      lastRecordedAudioUrl,
      lastRecordedAudioFileName,
      audioPlayer,
      recordingDuration,
      recordingTimer,
      isPaperPickedUp,
      isPaperFolded,
      isPaperOnFloor,
      noAnimation
    ] = [
      inject<LoginService>('loginService'),
      inject<ComputedRef<boolean>>('authenticated'),
      inject<ComputedRef<string>>('currentUsername'),
      ref<IQuestion | null>(null),
      ref<string | null>(null),
      ref<Array<number | null>>([]),
      ref<string | null>(null),
      ref(false),
      ref(false),
      ref(null),
      ref(null),
      ref(null),
      ref<string | null>(null),
      ref<string | null>(null),
      ref<HTMLAudioElement | null>(null),
      ref(0),
      ref(null),
      ref(false),
      ref(false),
      ref(false),
      ref(false)
    ];

    const questionService = new QuestionService();

    const openLogin = () => loginService.openLogin();

    const pickUpPaper = () => {
      isPaperPickedUp.value = true;
    };

    const foldPaper = () => {
      isPaperFolded.value = true;
    };

    const putPaperOnFloor = (event: DragEvent) => {
      event.preventDefault();
      noAnimation.value = true;
      isPaperOnFloor.value = true;
    };

    const startDragging = (event: DragEvent) => {
      event.dataTransfer?.setData('text/plain', 'paper');
    };

    const startRecording = async () => {
      if (!isRecording.value) {
        try {
          stream.value = await navigator.mediaDevices.getUserMedia({ audio: true });
          audioContext.value = new AudioContext();
          recorder.value = new MediaRecorder(stream.value);

          const audioChunks: Blob[] = [];
          recorder.value.ondataavailable = event => {
            audioChunks.push(event.data);
          };

          recorder.value.onstop = async () => {
            const audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
            await questionService.sendAudioToServer(audioBlob, question.value?.questionId);
            audioChunks.length = 0;
            await loadLastRecordedAudio();
          };

          recorder.value.start();
          isRecording.value = true;

          const timer = setInterval(() => {
            recordingDuration.value++;
          }, 1000);

          recordingTimer.value = timer;
        } catch (error) {
          console.error('Error starting recording:', error);
        }
      }
    };

    const stopRecording = () => {
      if (isRecording.value && recorder.value && recorder.value.state !== 'inactive') {
        recorder.value.stop();
        stream.value?.getTracks().forEach(track => track.stop());
        isRecording.value = false;
        clearInterval(recordingTimer.value);
        recordingDuration.value = 0;
      }
    };

    const loadLastRecordedAudio = async () => {
      if (question.value?.questionId) {
        try {
          const { data, fileName } = await questionService.getLastRecordedAudio(question.value.questionId);
          lastRecordedAudioUrl.value = URL.createObjectURL(data);
          lastRecordedAudioFileName.value = fileName;
        } catch (error) {
          console.error('Error loading last recorded audio:', error);
        }
      }
    };

    const createAnswer = (answerText: string | Array<number | null>, questionId: QuestionId): IAnswer => {
      if (typeof answerText === 'string') {
        return new Answer(answerText, questionId);
      } else if (Array.isArray(answerText) && answerText.length > 0) {
        // Filter out null values before joining
        const filteredAnswerText = answerText.filter(item => item !== null);
        return new Answer(filteredAnswerText.join(','), questionId);
      } else {
        return new Answer('', questionId);
      }
    };

    const submitAnswer = async () => {
      loading.value = true;
      if (question.value) {
        let answer: IAnswer;

        if (question.value.questionType === QuestionType.MULTIPLE_CHOICE && selectedAnswer.value ||
          question.value.questionType === QuestionType.TEXT_INPUT && selectedAnswer.value) {
          answer = createAnswer(selectedAnswer.value, question.value.questionId as QuestionId);
        } else if (question.value.questionType === QuestionType.SUBTRACTION_TASK && selectedAnswers.value) {
          answer = createAnswer(selectedAnswers.value, question.value.questionId as QuestionId);
        } else if (question.value.questionType === QuestionType.VOICE_INPUT && lastRecordedAudioUrl.value) {
          answer = createAnswer(lastRecordedAudioFileName.value, question.value.questionId as QuestionId);
        } else if (question.value.questionType === QuestionType.DRAG_AND_DROP) {
          const actions = [
            isPaperPickedUp.value,
            isPaperFolded.value,
            isPaperOnFloor.value
          ];
          answer = createAnswer(actions.join(','), question.value.questionId as QuestionId);
        } else {
          loading.value = false;
          return;
        }

        try {
          await questionService.submitAnswer(answer);
          await loadQuestion(); // Load the next question after submitting the answer
        } catch (error) {
          console.error('Error submitting answer:', error);
          // Optionally set an error message to display to the user
        } finally {
          loading.value = false;
        }
      } else {
        // If there's no question, stop loading
        loading.value = false;
      }
    };

    const retakeTest = async () => {
      isPaperPickedUp.value = false;
      isPaperFolded.value = false;
      isPaperOnFloor.value = false;
      const response = await questionService.retakeTest();

      if (typeof response === 'string') {
        quizEndMessage.value = response;
      } else {
        question.value = response;
        quizEndMessage.value = null; // clear end message
        selectedAnswers.value = []; // clear selected answer, initialize to empty array instead of null
      }
    };

    const loadQuestion = async () => {
      const response = await questionService.getQuestion();
      if (typeof response === 'string') {
        quizEndMessage.value = response;
        question.value = null;
      } else {
        question.value = response;
        selectedAnswers.value = [];
        selectedAnswer.value = null;
        if (question.value.questionType === QuestionType.VOICE_INPUT) {
          await loadLastRecordedAudio();
        } else {
          lastRecordedAudioUrl.value = null;
        }
      }
    };

    const isNextButtonDisabled = () => {
      if (question.value) {
        switch (question.value.questionType) {
          case QuestionType.MULTIPLE_CHOICE:
          case QuestionType.TEXT_INPUT:
            return !selectedAnswer.value; // Disabled if selectedAnswer is null or empty
          case QuestionType.SUBTRACTION_TASK:
            return selectedAnswers.value.some(answer => answer === null || answer === ''); // Disabled if any selectedAnswers element is null or empty
          case QuestionType.VOICE_INPUT:
            return !lastRecordedAudioUrl.value; // Disabled if lastRecordedAudioUrl is null or empty
          case QuestionType.DRAG_AND_DROP:
            return false; // Always enabled for drag and drop
          default:
            return true; // Disabled for any other case
        }
      }
      return true; // Disabled if there's no question
    };

    (async () => {
      watch(authenticated, async newVal => {
        if (newVal === true) {
          await loadQuestion();
        }
      });

      onMounted(async () => {
        if (authenticated.value) {
          await loadQuestion();
        }
      });
    })();

    return {
      authenticated,
      username,
      openLogin,
      t$: useI18n().t,
      question,
      selectedAnswer,
      selectedAnswers,
      submitAnswer,
      quizEndMessage,
      retakeTest,
      isNextButtonDisabled,
      loading,
      audioContext,
      recorder,
      stream,
      startRecording,
      stopRecording,
      isRecording,
      lastRecordedAudioUrl,
      lastRecordedAudioFileName,
      audioPlayer,
      loadLastRecordedAudio,
      recordingDuration,
      pickUpPaper,
      foldPaper,
      putPaperOnFloor,
      isPaperFolded,
      isPaperOnFloor,
      isPaperPickedUp,
      startDragging,
      noAnimation
    };
  }
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/home/home.vue
<template>
  <div class="home row">
    <div class="col-md-3">
      <span class="hipster img-fluid rounded"></span>
    </div>
    <div class="col-md-9">
      <h1 class="display-4" v-text="t$('home.title')"></h1>
      <p class="lead" v-text="t$('home.subtitle')"></p>

      <div>
        <!-- Show quiz end message when quiz ends -->

        <div>
          <div v-if="quizEndMessage" class="alert alert-info">
            {{ quizEndMessage }}
          </div>
          <b-button v-if="!question && authenticated" class="mt-3" variant="primary" @click="retakeTest"> Retake Test
          </b-button>
        </div>

        <!-- Conditionally show multiple choice or input fields based on question type -->

        <div v-if="loading" class="loader-container">
          <span>Loading...</span>
          <!-- Replace with your actual loader -->
        </div>

        <div v-if="question && authenticated && !loading">
          <h2>{{ question.questionText }}</h2>
          <div v-if="question.image" class="image-container">
            <img :src="'data:image/png;base64,' + question.image" alt="Question image" class="question-image" />
          </div>

          <!-- Render this div if question type is multiple choice -->
          <div v-if="question.questionType === QuestionType.MULTIPLE_CHOICE">
            <div class="row">
              <div class="col-md-6" v-for="(option, index) in question.answerOptions" :key="index">
                <b-button
                  :pressed="selectedAnswer === option"
                  variant="outline-primary"
                  @click="selectedAnswer = option"
                  class="w-100 p-3 mt-3 large-text capitalize"
                >
                  {{ option.toLowerCase() }}
                </b-button>
              </div>
            </div>
          </div>

          <!-- Render this div if question type is subtraction task -->
          <div v-if="question.questionType === QuestionType.SUBTRACTION_TASK">
            <div class="row">
              <div class="col-md-6" v-for="(option, index) in question.answerOptions" :key="index">
                <input
                  v-model="selectedAnswers[index]"
                  v-focus="index === 0"
                  :max="option.max"
                  :min="option.min"
                  :placeholder="option.placeholder"
                  class="form-control"
                  type="number"
                />
              </div>
            </div>
          </div>

          <div v-if="question.questionType === QuestionType.TEXT_INPUT">
            <div class="row">
              <div class="col-md-6">
                <input
                  v-model="selectedAnswer"
                  v-focus="true"
                  :min="1"
                  class="form-control"
                  required
                  type="text"
                  @keyup.enter="submitAnswer"
                />
                <!-- Always focus this input when it's rendered -->
              </div>
            </div>
          </div>

          <div v-if="question.questionType === QuestionType.VOICE_INPUT">
            <div class="row">
              <div class="col-md-12">
                <div class="voice-recorder">
                  <div class="button-group d-flex align-items-center">
                    <b-button :disabled="isRecording" class="mt-6 mr-2" variant="primary" @click="startRecording">
                      <font-awesome-icon icon="microphone" />
                      Start Recording
                    </b-button>
                    <b-button :disabled="!isRecording" class="mt-6" variant="danger" @click="stopRecording">
                      <font-awesome-icon icon="stop" />
                      Stop Recording
                    </b-button>
                    <div v-if="isRecording" class="recording-timer ml-3">{{ recordingDuration }}s</div>
                  </div>
                  <div v-if="lastRecordedAudioUrl" class="audio-player mt-3">
                    <p>To listen to your recorded audio, press the play button below:</p>
                    <audio ref="audioPlayer" :src="lastRecordedAudioUrl" controls></audio>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div v-if="question.questionType === QuestionType.DRAG_AND_DROP">
            <div v-if="!isPaperPickedUp" :class="{ 'picked-up': isPaperPickedUp, 'folded': isPaperFolded }" class="paper"
                 @click="pickUpPaper">
              <span>Paper</span>
            </div>
            <div
              v-if="isPaperPickedUp && !isPaperOnFloor"
              :class="{ 'picked-up': isPaperPickedUp, 'folded': isPaperFolded }"
              class="paper"
              draggable="true"
              @dragstart="startDragging">
              <div class="paper-content">
                <span v-if="!isPaperFolded">Paper picked</span>
                <span v-else>Folded Paper</span>
              </div>
            </div>
            <b-button v-if="!isPaperFolded" :disabled="!isPaperPickedUp" class="mt-6 mr-2" variant="dark"
                      @click="foldPaper">Fold Paper in Half
            </b-button>
            <div v-if="isPaperFolded" class="floor" @drop="putPaperOnFloor" @dragover.prevent>
              <span>Floor</span>
              <div v-if="isPaperOnFloor" :class="{ 'no-animation': noAnimation }" class="paper folded">
                <span>Folded Paper</span>
              </div>
            </div>
          </div>

          <b-button :disabled="isNextButtonDisabled() || loading" class="mt-3" variant="primary" @click="submitAnswer">
            Next
          </b-button>
        </div>

        <div class="alert alert-warning" v-if="!authenticated">
          <span v-text="t$('global.messages.info.authenticated.prefix')"></span>
          <a class="alert-link" v-on:click="openLogin()" v-text="t$('global.messages.info.authenticated.link')"></a
          ><span v-html="t$('global.messages.info.authenticated.suffix')"></span>
        </div>
        <div class="alert alert-warning" v-if="!authenticated">
          <span v-text="t$('global.messages.info.register.noaccount')"></span>&nbsp;
          <router-link class="alert-link" to="/register"
                       v-text="t$('global.messages.info.register.link')"></router-link>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./home.component.ts"></script>
<style scoped>
.large-text {
  font-size: 1.25em;
}

.capitalize {
  text-transform: capitalize;
}

.image-container {
  display: flex;
  justify-content: left;
  align-items: center;
  height: 100%; /* Adjust as needed */
}

.question-image {
  max-width: 65%;
  height: auto;
}

.paper {
  width: 300px;
  height: 210px;
  background-color: #fcfcf1;
  border: 1px solid gray;
  cursor: pointer;
  margin-bottom: 20px;
  transition: width 1.5s, height 1s;
}

.paper span {
  font-size: 16px;
  text-align: center;
}

.paper.picked-up {
  animation: pick-up 1s;
}

.paper.folded {
  width: 150px;
  height: 210px;
  animation: fold 1.5s;
}

.paper.folded.no-animation {
  animation: none;
}

.floor {
  width: 600px;
  height: 300px;
  border: 1px dashed black;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.floor span {
  font-size: 16px;
  text-align: center;
}

@keyframes pick-up {
  0% {
    transform: translate3d(0, 0, 0);
  }
  50% {
    transform: translate3d(20px, -40px, 20px);
  }
  100% {
    transform: translate3d(0, 0, 0);
  }
}

@keyframes fold {
  0% {
    transform: scale(0.6) rotate(0deg);
  }
  50% {
    transform: scale(0.8) rotate(10deg);
  }
  100% {
    transform: scale(1) rotate(0deg);
  }
}
</style>


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/ribbon/ribbon.component.ts
import { computed, defineComponent } from 'vue';
import { useI18n } from 'vue-i18n';
import { useStore } from '@/store';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'Ribbon',
  setup(prop) {
    const store = useStore();
    const ribbonEnv = computed(() => store.ribbonOnProfiles);
    const ribbonEnabled = computed(() => store.ribbonOnProfiles && store.activeProfiles.indexOf(store.ribbonOnProfiles) > -1);

    return {
      ribbonEnv,
      ribbonEnabled,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/ribbon/ribbon.vue
<template>
  <div class="ribbon" v-if="ribbonEnabled">
    <a href="" v-text="t$('global.ribbon.' + ribbonEnv)"></a>
  </div>
</template>

<script lang="ts" src="./ribbon.component.ts"></script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
/* ==========================================================================
Development Ribbon
========================================================================== */
.ribbon {
  background-color: rgba(170, 0, 0, 0.5);
  left: -3.5em;
  -moz-transform: rotate(-45deg);
  -ms-transform: rotate(-45deg);
  -o-transform: rotate(-45deg);
  -webkit-transform: rotate(-45deg);
  transform: rotate(-45deg);
  overflow: hidden;
  position: absolute;
  top: 40px;
  white-space: nowrap;
  width: 15em;
  z-index: 9999;
  pointer-events: none;
  opacity: 0.75;
}

.ribbon a {
  color: #fff;
  display: block;
  font-weight: 400;
  margin: 1px 0;
  padding: 10px 50px;
  text-align: center;
  text-decoration: none;
  text-shadow: 0 0 5px #444;
  pointer-events: none;
}
</style>


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/jhi-footer/jhi-footer.component.ts
import { computed, defineComponent } from 'vue';
import { useI18n } from 'vue-i18n';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseFooter',
  setup() {
    const { t } = useI18n();

    const copyright = computed(() => {
      const currentYear = new Date().getFullYear();
      return `${t('footer')} © ${currentYear}`;
    });

    return {
      t,
      copyright
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/jhi-footer/jhi-footer.vue
<template>
  <div id="footer" class="footer">
    <!--    <p v-text="copyright"></p>-->
  </div>
</template>

<script lang="ts" src="./jhi-footer.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/jhi-navbar/jhi-navbar.vue
<template>
  <b-navbar data-cy="navbar" toggleable="md" type="dark" class="jh-navbar">
    <b-navbar-brand class="logo" b-link to="/">
      <span class="logo-img"></span>
      <span v-text="t$('global.title')" class="navbar-title"></span> <span class="navbar-version">{{ version }}</span>
    </b-navbar-brand>
    <b-navbar-toggle
      right
      class="jh-navbar-toggler d-lg-none"
      href="javascript:void(0);"
      data-toggle="collapse"
      target="header-tabs"
      aria-expanded="false"
      aria-label="Toggle navigation"
    >
      <font-awesome-icon icon="bars" />
    </b-navbar-toggle>

    <b-collapse is-nav id="header-tabs">
      <b-navbar-nav class="ml-auto">
        <b-nav-item to="/" exact>
          <span>
            <font-awesome-icon icon="home" />
            <span v-text="t$('global.menu.home')"></span>
          </span>
        </b-nav-item>
        <b-nav-item-dropdown right id="entity-menu" v-if="authenticated" active-class="active" class="pointer"
                             data-cy="entity">
          <template #button-content>
            <span class="navbar-dropdown-menu">
              <font-awesome-icon icon="th-list" />
              <span class="no-bold" v-text="t$('global.menu.entities.main')"></span>
            </span>
          </template>
          <entities-menu></entities-menu>
          <!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here -->
        </b-nav-item-dropdown>
        <b-nav-item-dropdown
          right
          id="admin-menu"
          v-if="hasAnyAuthority('ROLE_ADMIN') && authenticated"
          :class="{ 'router-link-active': subIsActive('/admin') }"
          active-class="active"
          class="pointer"
          data-cy="adminMenu"
        >
          <template #button-content>
            <span class="navbar-dropdown-menu">
              <font-awesome-icon icon="users-cog" />
              <span class="no-bold" v-text="t$('global.menu.admin.main')"></span>
            </span>
          </template>
          <b-dropdown-item to="/admin/user-management" active-class="active">
            <font-awesome-icon icon="users" />
            <span v-text="t$('global.menu.admin.userManagement')"></span>
          </b-dropdown-item>
          <b-dropdown-item to="/admin/metrics" active-class="active">
            <font-awesome-icon icon="tachometer-alt" />
            <span v-text="t$('global.menu.admin.metrics')"></span>
          </b-dropdown-item>
          <b-dropdown-item to="/admin/health" active-class="active">
            <font-awesome-icon icon="heart" />
            <span v-text="t$('global.menu.admin.health')"></span>
          </b-dropdown-item>
          <b-dropdown-item to="/admin/configuration" active-class="active">
            <font-awesome-icon icon="cogs" />
            <span v-text="t$('global.menu.admin.configuration')"></span>
          </b-dropdown-item>
          <b-dropdown-item to="/admin/logs" active-class="active">
            <font-awesome-icon icon="tasks" />
            <span v-text="t$('global.menu.admin.logs')"></span>
          </b-dropdown-item>
          <b-dropdown-item v-if="openAPIEnabled" to="/admin/docs" active-class="active">
            <font-awesome-icon icon="book" />
            <span v-text="t$('global.menu.admin.apidocs')"></span>
          </b-dropdown-item>
        </b-nav-item-dropdown>
        <b-nav-item-dropdown id="languagesnavBarDropdown" right v-if="languages && Object.keys(languages).length > 1">
          <template #button-content>
            <font-awesome-icon icon="flag" />
            <span class="no-bold" v-text="t$('global.menu.language')"></span>
          </template>
          <b-dropdown-item
            v-for="(value, key) in languages"
            :key="`lang-${key}`"
            v-on:click="changeLanguage(key)"
            :class="{ active: isActiveLanguage(key) }"
          >
            {{ value.name }}
          </b-dropdown-item>
        </b-nav-item-dropdown>
        <b-nav-item-dropdown
          right
          href="javascript:void(0);"
          id="account-menu"
          :class="{ 'router-link-active': subIsActive('/account') }"
          active-class="active"
          class="pointer"
          data-cy="accountMenu"
        >
          <template #button-content>
            <span class="navbar-dropdown-menu">
              <font-awesome-icon icon="user" />
              <span class="no-bold" v-text="t$('global.menu.account.main')"></span>
            </span>
          </template>
          <b-dropdown-item data-cy="settings" to="/account/settings" v-if="authenticated" active-class="active">
            <font-awesome-icon icon="wrench" />
            <span v-text="t$('global.menu.account.settings')"></span>
          </b-dropdown-item>
          <b-dropdown-item data-cy="passwordItem" to="/account/password" v-if="authenticated" active-class="active">
            <font-awesome-icon icon="lock" />
            <span v-text="t$('global.menu.account.password')"></span>
          </b-dropdown-item>
          <b-dropdown-item data-cy="logout" v-if="authenticated" v-on:click="logout()" id="logout"
                           active-class="active">
            <font-awesome-icon icon="sign-out-alt" />
            <span v-text="t$('global.menu.account.logout')"></span>
          </b-dropdown-item>
          <b-dropdown-item data-cy="login" v-if="!authenticated" v-on:click="openLogin()" id="login"
                           active-class="active">
            <font-awesome-icon icon="sign-in-alt" />
            <span v-text="t$('global.menu.account.login')"></span>
          </b-dropdown-item>
          <b-dropdown-item data-cy="register" to="/register" id="register" v-if="!authenticated" active-class="active">
            <font-awesome-icon icon="user-plus" />
            <span v-text="t$('global.menu.account.register')"></span>
          </b-dropdown-item>
        </b-nav-item-dropdown>
      </b-navbar-nav>
    </b-collapse>
  </b-navbar>
</template>

<script lang="ts" src="./jhi-navbar.component.ts"></script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
/* ==========================================================================
    Navbar
    ========================================================================== */
.navbar-version {
  font-size: 10px;
  color: #ccc;
}

.jh-navbar {
  background-color: #353d47;
  padding: 0.2em 1em;
}

.jh-navbar .profile-image {
  margin: -10px 0px;
  height: 40px;
  width: 40px;
  border-radius: 50%;
}

.jh-navbar .dropdown-item.active,
.jh-navbar .dropdown-item.active:focus,
.jh-navbar .dropdown-item.active:hover {
  background-color: #353d47;
}

.jh-navbar .dropdown-toggle::after {
  margin-left: 0.15em;
}

.jh-navbar ul.navbar-nav {
  padding: 0.5em;
}

.jh-navbar .navbar-nav .nav-item {
  margin-left: 1.5rem;
}

.jh-navbar a.nav-link,
.jh-navbar .no-bold {
  font-weight: 400;
}

.jh-navbar .jh-navbar-toggler {
  color: #ccc;
  font-size: 1.5em;
  padding: 10px;
}

.jh-navbar .jh-navbar-toggler:hover {
  color: #fff;
}

@media screen and (min-width: 768px) {
  .jh-navbar-toggler {
    display: none;
  }
}

@media screen and (min-width: 768px) and (max-width: 1150px) {
  span span {
    display: none;
  }
}

.navbar-title {
  display: inline-block;
  vertical-align: middle;
  color: white;
}

/* ==========================================================================
    Logo styles
    ========================================================================== */
.navbar-brand.logo {
  padding: 5px 15px;
}

.logo .logo-img {
  height: 45px;
  display: inline-block;
  vertical-align: middle;
  width: 70px;
}

.logo-img {
  height: 100%;
  background: url('/content/images/logo-jhipster.png') no-repeat center center;
  background-size: contain;
  width: 100%;
  filter: drop-shadow(0 0 0.05rem white);
  margin: 0 5px;
}
</style>


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/jhi-navbar/jhi-navbar.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import LoginService from '@/account/login.service';
import type AccountService from '@/account/account.service';
import languages from '@/shared/config/languages';
import EntitiesMenu from '@/entities/entities-menu.vue';

import { useStore } from '@/store';
import { useRouter } from 'vue-router';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'JhiNavbar',
  components: {
    'entities-menu': EntitiesMenu
  },
  setup() {
    const loginService = inject<LoginService>('loginService');
    const accountService = inject<AccountService>('accountService');
    const currentLanguage = inject('currentLanguage', () => computed(() => navigator.language ?? 'en'), true);
    const changeLanguage = inject<(string) => Promise<void>>('changeLanguage');

    const isActiveLanguage = (key: string) => {
      return key === currentLanguage.value;
    };

    const router = useRouter();
    const store = useStore();

    const version = 'v' + VERSION;
    const hasAnyAuthorityValues: Ref<any> = ref({});

    const openAPIEnabled = computed(() => store.activeProfiles.indexOf('api-docs') > -1);
    const inProduction = computed(() => store.activeProfiles.indexOf('prod') > -1);
    const authenticated = computed(() => store.authenticated);

    const openLogin = () => {
      loginService.openLogin();
    };

    const subIsActive = (input: string | string[]) => {
      const paths = Array.isArray(input) ? input : [input];
      return paths.some(path => {
        return router.currentRoute.value.path.indexOf(path) === 0; // current path starts with this path string
      });
    };

    const logout = async () => {
      localStorage.removeItem('mmse-authenticationToken');
      sessionStorage.removeItem('mmse-authenticationToken');
      store.logout();
      if (router.currentRoute.value.path !== '/') {
        router.push('/');
      }
    };

    return {
      logout,
      subIsActive,
      accountService,
      openLogin,
      changeLanguage,
      languages: languages(),
      isActiveLanguage,
      version,
      currentLanguage,
      hasAnyAuthorityValues,
      openAPIEnabled,
      inProduction,
      authenticated,
      t$: useI18n().t
    };
  },
  methods: {
    hasAnyAuthority(authorities: any): boolean {
      this.accountService.hasAnyAuthorityAndCheckAuth(authorities).then(value => {
        if (this.hasAnyAuthorityValues[authorities] !== value) {
          this.hasAnyAuthorityValues = { ...this.hasAnyAuthorityValues, [authorities]: value };
        }
      });
      return this.hasAnyAuthorityValues[authorities] ?? false;
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/error/error.component.ts
import { ComputedRef, defineComponent, inject, Ref, ref } from 'vue';
import { useI18n } from 'vue-i18n';
import LoginService from '@/account/login.service';
import { useRoute } from 'vue-router';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'Error',
  setup() {
    const loginService = inject<LoginService>('loginService');
    const authenticated = inject<ComputedRef<boolean>>('authenticated');
    const errorMessage: Ref<string> = ref(null);
    const error403: Ref<boolean> = ref(false);
    const error404: Ref<boolean> = ref(false);
    const route = useRoute();

    if (route.meta) {
      errorMessage.value = route.meta.errorMessage ?? null;
      error403.value = route.meta.error403 ?? false;
      error404.value = route.meta.error404 ?? false;
      if (!authenticated.value && error403.value) {
        loginService.openLogin();
      }
    }

    return {
      errorMessage,
      error403,
      error404,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/core/error/error.vue
<template>
  <div>
    <div class="row">
      <div class="col-md-3">
        <span class="hipster img-fluid rounded"></span>
      </div>
      <div class="col-md-9">
        <h1 v-text="t$('error.title')"></h1>

        <div v-if="errorMessage">
          <div class="alert alert-danger">{{ errorMessage }}</div>
        </div>
        <div v-if="error403" class="alert alert-danger" v-text="t$('error.http.403')"></div>
        <div v-if="error404" class="alert alert-warning" v-text="t$('error.http.404')"></div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./error.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/metrics/metrics-modal.vue
<template>
  <div class="modal-body">
    <span class="badge badge-primary" v-on:click="threadDumpFilter = ''"
    >All&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpData.threadDumpAll }}</span></span
    >&nbsp;
    <span class="badge badge-success" v-on:click="threadDumpFilter = 'RUNNABLE'"
    >Runnable&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpData.threadDumpRunnable }}</span></span
    >&nbsp;
    <span class="badge badge-info" v-on:click="threadDumpFilter = 'WAITING'"
    >Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpData.threadDumpWaiting }}</span></span
    >&nbsp;
    <span class="badge badge-warning" v-on:click="threadDumpFilter = 'TIMED_WAITING'"
    >Timed Waiting&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpData.threadDumpTimedWaiting }}</span></span
    >&nbsp;
    <span class="badge badge-danger" v-on:click="threadDumpFilter = 'BLOCKED'"
    >Blocked&nbsp;<span class="badge badge-pill badge-default">{{ threadDumpData.threadDumpBlocked }}</span></span
    >&nbsp;
    <div class="mt-2">&nbsp;</div>
    Filter
    <input type="text" v-model="threadDumpFilter" class="form-control" />
    <div class="pad" v-for="(entry, key) of filteredThreadDump" :key="key">
      <h6>
        <span class="badge" :class="getBadgeClass(entry.threadState)">{{ entry.threadState }}</span
        >&nbsp;{{ entry.threadName }} (ID {{ entry.threadId }})
        <a v-on:click="entry.show = !entry.show" href="javascript:void(0);">
          <span :hidden="entry.show" v-text="t$('metrics.jvm.threads.dump.show')"></span>
          <span :hidden="!entry.show" v-text="t$('metrics.jvm.threads.dump.hide')"></span>
        </a>
      </h6>
      <div class="card" :hidden="!entry.show">
        <div class="card-body">
          <div v-for="(st, key) of entry.stackTrace" :key="key" class="break">
            <samp
            >{{ st.className }}.{{ st.methodName }}(<code>{{ st.fileName }}:{{ st.lineNumber }}</code
            >)</samp
            >
            <span class="mt-1"></span>
          </div>
        </div>
      </div>
      <table class="table table-sm table-responsive" aria-describedby="Metrics">
        <thead>
        <tr>
          <th v-text="t$('metrics.jvm.threads.dump.blockedtime')" scope="col"></th>
          <th v-text="t$('metrics.jvm.threads.dump.blockedcount')" scope="col"></th>
          <th v-text="t$('metrics.jvm.threads.dump.waitedtime')" scope="col"></th>
          <th v-text="t$('metrics.jvm.threads.dump.waitedcount')" scope="col"></th>
          <th v-text="t$('metrics.jvm.threads.dump.lockname')" scope="col"></th>
        </tr>
        </thead>
        <tbody>
        <tr>
          <td>{{ entry.blockedTime }}</td>
          <td>{{ entry.blockedCount }}</td>
          <td>{{ entry.waitedTime }}</td>
          <td>{{ entry.waitedCount }}</td>
          <td class="thread-dump-modal-lock" :title="entry.lockName">
            <code>{{ entry.lockName }}</code>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
  </div>
</template>

<script lang="ts" src="./metrics-modal.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/metrics/metrics-modal.component.ts
import { computed, defineComponent, PropType, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';

import { filterBy } from '@/shared/computables';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseMetricsModal',
  props: {
    threadDump: {
      type: Array as PropType<any[]>
    },
  },
  setup(props) {
    const threadDumpFilter: Ref<any> = ref('');
    const filteredThreadDump = computed(() => filterBy(props.threadDump, { filterByTerm: threadDumpFilter.value }));

    const threadDumpData = computed(() => {
      const data = {
        threadDumpAll: 0,
        threadDumpBlocked: 0,
        threadDumpRunnable: 0,
        threadDumpTimedWaiting: 0,
        threadDumpWaiting: 0
      };
      if (props.threadDump) {
        props.threadDump.forEach(value => {
          if (value.threadState === 'RUNNABLE') {
            data.threadDumpRunnable += 1;
          } else if (value.threadState === 'WAITING') {
            data.threadDumpWaiting += 1;
          } else if (value.threadState === 'TIMED_WAITING') {
            data.threadDumpTimedWaiting += 1;
          } else if (value.threadState === 'BLOCKED') {
            data.threadDumpBlocked += 1;
          }
        });
        data.threadDumpAll = data.threadDumpRunnable + data.threadDumpWaiting + data.threadDumpTimedWaiting + data.threadDumpBlocked;
      }
      return data;
    });

    return {
      threadDumpFilter,
      threadDumpData,
      filteredThreadDump,
      t$: useI18n().t
    };
  },
  methods: {
    getBadgeClass(threadState: string): string {
      if (threadState === 'RUNNABLE') {
        return 'badge-success';
      } else if (threadState === 'WAITING') {
        return 'badge-info';
      } else if (threadState === 'TIMED_WAITING') {
        return 'badge-warning';
      } else if (threadState === 'BLOCKED') {
        return 'badge-danger';
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/metrics/metrics.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import numeral from 'numeral';

import { useDateFormat } from '@/shared/composables';
import MmseMetricsModal from './metrics-modal.vue';
import MetricsService from './metrics.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseMetrics',
  components: {
    'metrics-modal': MmseMetricsModal
  },
  setup() {
    const { formatDate } = useDateFormat();
    const metricsService = inject('metricsService', () => new MetricsService(), true);

    const metrics: Ref<any> = ref({});
    const threadData: Ref<any> = ref(null);
    const threadStats: Ref<any> = ref({});
    const updatingMetrics = ref(true);

    return {
      metricsService,
      metrics,
      threadData,
      threadStats,
      updatingMetrics,
      formatDate,
      t$: useI18n().t
    };
  },
  mounted(): void {
    this.refresh();
  },
  methods: {
    refresh() {
      return this.metricsService
        .getMetrics()
        .then(resultsMetrics => {
          this.metrics = resultsMetrics.data;
          this.metricsService
            .retrieveThreadDump()
            .then(res => {
              this.updatingMetrics = true;
              this.threadData = res.data.threads;

              this.threadStats = {
                threadDumpRunnable: 0,
                threadDumpWaiting: 0,
                threadDumpTimedWaiting: 0,
                threadDumpBlocked: 0,
                threadDumpAll: 0
              };

              this.threadData.forEach(value => {
                if (value.threadState === 'RUNNABLE') {
                  this.threadStats.threadDumpRunnable += 1;
                } else if (value.threadState === 'WAITING') {
                  this.threadStats.threadDumpWaiting += 1;
                } else if (value.threadState === 'TIMED_WAITING') {
                  this.threadStats.threadDumpTimedWaiting += 1;
                } else if (value.threadState === 'BLOCKED') {
                  this.threadStats.threadDumpBlocked += 1;
                }
              });

              this.threadStats.threadDumpAll =
                this.threadStats.threadDumpRunnable +
                this.threadStats.threadDumpWaiting +
                this.threadStats.threadDumpTimedWaiting +
                this.threadStats.threadDumpBlocked;

              this.updatingMetrics = false;
            })
            .catch(() => {
              this.updatingMetrics = true;
            });
        })
        .catch(() => {
          this.updatingMetrics = true;
        });
    },
    openModal(): void {
      if ((<any>this.$refs.metricsModal).show) {
        (<any>this.$refs.metricsModal).show();
      }
    },
    filterNaN(input: any): any {
      if (isNaN(input)) {
        return 0;
      }
      return input;
    },
    formatNumber1(value: any): any {
      return numeral(value).format('0,0');
    },
    formatNumber2(value: any): any {
      return numeral(value).format('0,00');
    },
    convertMillisecondsToDuration(ms) {
      const times = {
        year: 31557600000,
        month: 2629746000,
        day: 86400000,
        hour: 3600000,
        minute: 60000,
        second: 1000
      };
      let time_string = '';
      let plural = '';
      for (const key in times) {
        if (Math.floor(ms / times[key]) > 0) {
          if (Math.floor(ms / times[key]) > 1) {
            plural = 's';
          } else {
            plural = '';
          }
          time_string += `${Math.floor(ms / times[key])} ${key}${plural} `;
          ms = ms - times[key] * Math.floor(ms / times[key]);
        }
      }
      return time_string;
    },
    isObjectExisting(metrics: any, key: string): boolean {
      return metrics && metrics[key];
    },
    isObjectExistingAndNotEmpty(metrics: any, key: string): boolean {
      return this.isObjectExisting(metrics, key) && JSON.stringify(metrics[key]) !== '{}';
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/metrics/metrics.vue
<template>
  <div>
    <h2>
      <span id="metrics-page-heading" v-text="t$('metrics.title')" data-cy="metricsPageHeading"></span>
      <button class="btn btn-primary float-right" v-on:click="refresh()">
        <font-awesome-icon icon="sync"></font-awesome-icon>
        <span v-text="t$('metrics[\'refresh.button\']')"></span>
      </button>
    </h2>

    <h3 v-text="t$('metrics.jvm.title')"></h3>
    <div class="row" v-if="!updatingMetrics">
      <div class="col-md-4">
        <h4 v-text="t$('metrics.jvm.memory.title')"></h4>
        <div>
          <div v-for="(entry, key) of metrics.jvm" :key="key">
            <span v-if="entry.max !== -1">
              <span>{{ key }}</span> ({{ formatNumber1(entry.used / 1048576) }}M / {{ formatNumber1(entry.max / 1048576)
              }}M)
            </span>
            <span v-else>
              <span>{{ key }}</span> {{ formatNumber1(entry.used / 1048576) }}M
            </span>
            <div>Committed : {{ formatNumber1(entry.committed / 1048576) }}M</div>
            <b-progress v-if="entry.max !== -1" variant="success" animated :max="entry.max" striped>
              <b-progress-bar :value="entry.used"
                              :label="formatNumber1((entry.used * 100) / entry.max) + '%'"></b-progress-bar>
            </b-progress>
          </div>
        </div>
      </div>
      <div class="col-md-4">
        <h4 v-text="t$('metrics.jvm.threads.title')"></h4>
        <span><span v-text="t$('metrics.jvm.threads.runnable')"></span> {{ threadStats.threadDumpRunnable }}</span>
        <b-progress variant="success" :max="threadStats.threadDumpAll" striped>
          <b-progress-bar
            :value="threadStats.threadDumpRunnable"
            :label="formatNumber1((threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll) + '%'"
          >
          </b-progress-bar>
        </b-progress>

        <span><span v-text="t$('metrics.jvm.threads.timedwaiting')"></span> ({{ threadStats.threadDumpTimedWaiting
          }})</span>
        <b-progress variant="success" :max="threadStats.threadDumpAll" striped>
          <b-progress-bar
            :value="threadStats.threadDumpTimedWaiting"
            :label="formatNumber1((threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll) + '%'"
          >
          </b-progress-bar>
        </b-progress>

        <span><span v-text="t$('metrics.jvm.threads.waiting')"></span> ({{ threadStats.threadDumpWaiting }})</span>
        <b-progress variant="success" :max="threadStats.threadDumpAll" striped>
          <b-progress-bar
            :value="threadStats.threadDumpWaiting"
            :label="formatNumber1((threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll) + '%'"
          >
          </b-progress-bar>
        </b-progress>

        <span><span v-text="t$('metrics.jvm.threads.blocked')"></span> ({{ threadStats.threadDumpBlocked }})</span>
        <b-progress variant="success" :max="threadStats.threadDumpAll" striped>
          <b-progress-bar
            :value="threadStats.threadDumpBlocked"
            :label="formatNumber1((threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll) + '%'"
          >
          </b-progress-bar>
        </b-progress>

        <span
        >Total: {{ threadStats.threadDumpAll }}
          <a class="hand" v-b-modal.metricsModal data-toggle="modal" v-on:click="openModal()" data-target="#threadDump">
            <font-awesome-icon icon="eye"></font-awesome-icon>
          </a>
        </span>
      </div>
      <div class="col-md-4">
        <h4>System</h4>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-4">Uptime</div>
          <div class="col-md-8 text-right">{{ convertMillisecondsToDuration(metrics.processMetrics['process.uptime'])
            }}
          </div>
        </div>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-4">Start time</div>
          <div class="col-md-8 text-right">{{ formatDate(metrics.processMetrics['process.start.time']) }}</div>
        </div>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">Process CPU usage</div>
          <div class="col-md-3 text-right">{{ formatNumber2(100 * metrics.processMetrics['process.cpu.usage']) }} %
          </div>
        </div>
        <b-progress variant="success" :max="100" striped>
          <b-progress-bar
            :value="100 * metrics.processMetrics['process.cpu.usage']"
            :label="formatNumber1(100 * metrics.processMetrics['process.cpu.usage']) + '%'"
          >
          </b-progress-bar>
        </b-progress>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">System CPU usage</div>
          <div class="col-md-3 text-right">{{ formatNumber2(100 * metrics.processMetrics['system.cpu.usage']) }} %</div>
        </div>
        <b-progress variant="success" :max="100" striped>
          <b-progress-bar
            :value="100 * metrics.processMetrics['system.cpu.usage']"
            :label="formatNumber1(100 * metrics.processMetrics['system.cpu.usage']) + '%'"
          >
          </b-progress-bar>
        </b-progress>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">System CPU count</div>
          <div class="col-md-3 text-right">{{ metrics.processMetrics['system.cpu.count'] }}</div>
        </div>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">System 1m Load average</div>
          <div class="col-md-3 text-right">{{ formatNumber2(metrics.processMetrics['system.load.average.1m']) }}</div>
        </div>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">Process files max</div>
          <div class="col-md-3 text-right">{{ formatNumber1(metrics.processMetrics['process.files.max']) }}</div>
        </div>
        <div class="row" v-if="!updatingMetrics">
          <div class="col-md-9">Process files open</div>
          <div class="col-md-3 text-right">{{ formatNumber1(metrics.processMetrics['process.files.open']) }}</div>
        </div>
      </div>
    </div>

    <h3 v-text="t$('metrics.jvm.gc.title')"></h3>
    <div class="row" v-if="!updatingMetrics && isObjectExisting(metrics, 'garbageCollector')">
      <div class="col-md-4">
        <div>
          <span>
            GC Live Data Size/GC Max Data Size ({{ formatNumber1(metrics.garbageCollector['jvm.gc.live.data.size'] / 1048576)
            }}M /
            {{ formatNumber1(metrics.garbageCollector['jvm.gc.max.data.size'] / 1048576) }}M)
          </span>
          <b-progress variant="success" :max="metrics.garbageCollector['jvm.gc.max.data.size']" striped>
            <b-progress-bar
              :value="metrics.garbageCollector['jvm.gc.live.data.size']"
              :label="
                formatNumber2(
                  (100 * metrics.garbageCollector['jvm.gc.live.data.size']) / metrics.garbageCollector['jvm.gc.max.data.size']
                ) + '%'
              "
            >
            </b-progress-bar>
          </b-progress>
        </div>
      </div>
      <div class="col-md-4">
        <div>
          <span>
            GC Memory Promoted/GC Memory Allocated ({{ formatNumber1(metrics.garbageCollector['jvm.gc.memory.promoted'] / 1048576)
            }}M /
            {{ formatNumber1(metrics.garbageCollector['jvm.gc.memory.allocated'] / 1048576) }}M)
          </span>
          <b-progress variant="success" :max="metrics.garbageCollector['jvm.gc.memory.allocated']" striped>
            <b-progress-bar
              :value="metrics.garbageCollector['jvm.gc.memory.promoted']"
              :label="
                formatNumber2(
                  (100 * metrics.garbageCollector['jvm.gc.memory.promoted']) / metrics.garbageCollector['jvm.gc.memory.allocated']
                ) + '%'
              "
            >
            </b-progress-bar>
          </b-progress>
        </div>
      </div>
      <div class="col-md-4">
        <div class="row">
          <div class="col-md-9">Classes loaded</div>
          <div class="col-md-3 text-right">{{ metrics.garbageCollector.classesLoaded }}</div>
        </div>
        <div class="row">
          <div class="col-md-9">Classes unloaded</div>
          <div class="col-md-3 text-right">{{ metrics.garbageCollector.classesUnloaded }}</div>
        </div>
      </div>
      <div class="table-responsive">
        <table class="table table-striped" aria-describedby="Jvm gc">
          <thead>
          <tr>
            <th scope="col"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.count')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.mean')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.min')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p50')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p75')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p95')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p99')"></th>
            <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.max')"></th>
          </tr>
          </thead>
          <tbody>
          <tr>
            <td>jvm.gc.pause</td>
            <td class="text-right">{{ metrics.garbageCollector['jvm.gc.pause'].count }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause'].mean) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause']['0.0']) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause']['0.5']) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause']['0.75']) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause']['0.95']) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause']['0.99']) }}</td>
            <td class="text-right">{{ formatNumber2(metrics.garbageCollector['jvm.gc.pause'].max) }}</td>
          </tr>
          </tbody>
        </table>
      </div>
    </div>

    <h3 v-text="t$('metrics.jvm.http.title')"></h3>
    <table
      class="table table-striped"
      v-if="!updatingMetrics && isObjectExisting(metrics, 'http.server.requests')"
      aria-describedby="Jvm http"
    >
      <thead>
      <tr>
        <th scope="col" v-text="t$('metrics.jvm.http.table.code')"></th>
        <th scope="col" v-text="t$('metrics.jvm.http.table.count')"></th>
        <th scope="col" class="text-right" v-text="t$('metrics.jvm.http.table.mean')"></th>
        <th scope="col" class="text-right" v-text="t$('metrics.jvm.http.table.max')"></th>
      </tr>
      </thead>
      <tbody>
      <tr v-for="(entry, key) of metrics['http.server.requests']['percode']" :key="key">
        <td>{{ key }}</td>
        <td>
          <b-progress variant="success" animated :max="metrics['http.server.requests']['all'].count" striped>
            <b-progress-bar :value="entry.count" :label="formatNumber1(entry.count)"></b-progress-bar>
          </b-progress>
        </td>
        <td class="text-right">
          {{ formatNumber2(filterNaN(entry.mean)) }}
        </td>
        <td class="text-right">{{ formatNumber2(entry.max) }}</td>
      </tr>
      </tbody>
    </table>

    <h3>Endpoints requests (time in millisecond)</h3>
    <div class="table-responsive" v-if="!updatingMetrics">
      <table class="table table-striped" aria-describedby="Endpoint">
        <thead>
        <tr>
          <th scope="col">Method</th>
          <th scope="col">Endpoint url</th>
          <th scope="col" class="text-right">Count</th>
          <th scope="col" class="text-right">Mean</th>
        </tr>
        </thead>
        <tbody>
        <template v-for="(entry, entryKey) of metrics.services">
          <tr v-for="(method, methodKey) of entry" :key="entryKey + '-' + methodKey">
            <td>{{ methodKey }}</td>
            <td>{{ entryKey }}</td>
            <td class="text-right">{{ method.count }}</td>
            <td class="text-right">{{ formatNumber2(method.mean) }}</td>
          </tr>
        </template>
        </tbody>
      </table>
    </div>

    <h3 v-text="t$('metrics.cache.title')"></h3>
    <div class="table-responsive" v-if="!updatingMetrics && isObjectExisting(metrics, 'cache')">
      <table class="table table-striped" aria-describedby="Cache">
        <thead>
        <tr>
          <th scope="col" v-text="t$('metrics.cache.cachename')"></th>
          <th scope="col" class="text-right" data-translate="metrics.cache.hits">Cache Hits</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.misses">Cache Misses</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.gets">Cache Gets</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.puts">Cache Puts</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.removals">Cache Removals</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.evictions">Cache Evictions</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.hitPercent">Cache Hit %</th>
          <th scope="col" class="text-right" data-translate="metrics.cache.missPercent">Cache Miss %</th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="(entry, key) of metrics.cache" :key="key">
          <td>{{ key }}</td>
          <td class="text-right">{{ entry['cache.gets.hit'] }}</td>
          <td class="text-right">{{ entry['cache.gets.miss'] }}</td>
          <td class="text-right">{{ entry['cache.gets.hit'] + entry['cache.gets.miss'] }}</td>
          <td class="text-right">{{ entry['cache.puts'] }}</td>
          <td class="text-right">{{ entry['cache.removals'] }}</td>
          <td class="text-right">{{ entry['cache.evictions'] }}</td>
          <td class="text-right">
            {{ formatNumber2(filterNaN((100 * entry['cache.gets.hit']) / (entry['cache.gets.hit'] + entry['cache.gets.miss'])))
            }}
          </td>
          <td class="text-right">
            {{ formatNumber2(filterNaN((100 * entry['cache.gets.miss']) / (entry['cache.gets.hit'] + entry['cache.gets.miss'])))
            }}
          </td>
        </tr>
        </tbody>
      </table>
    </div>

    <h3 v-text="t$('metrics.datasource.title')"></h3>
    <div class="table-responsive" v-if="!updatingMetrics && isObjectExistingAndNotEmpty(metrics, 'databases')">
      <table class="table table-striped" aria-describedby="Connection pool">
        <thead>
        <tr>
          <th scope="col">
            <span v-text="t$('metrics.datasource.usage')"></span> (active: {{ metrics.databases.active.value }}, min:
            {{ metrics.databases.min.value }}, max: {{ metrics.databases.max.value }}, idle:
            {{ metrics.databases.idle.value }})
          </th>
          <th scope="col" class="text-right" v-text="t$('metrics.datasource.count')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.datasource.mean')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.min')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p50')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p75')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p95')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.servicesstats.table.p99')"></th>
          <th scope="col" class="text-right" v-text="t$('metrics.datasource.max')"></th>
        </tr>
        </thead>
        <tbody>
        <tr>
          <td>Acquire</td>
          <td class="text-right">{{ metrics.databases.acquire.count }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.acquire.mean)) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.acquire['0.0']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.acquire['0.5']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.acquire['0.75']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.acquire['0.95']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.acquire['0.99']) }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.acquire.max)) }}</td>
        </tr>
        <tr>
          <td>Creation</td>
          <td class="text-right">{{ metrics.databases.creation.count }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.creation.mean)) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.creation['0.0']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.creation['0.5']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.creation['0.75']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.creation['0.95']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.creation['0.99']) }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.creation.max)) }}</td>
        </tr>
        <tr>
          <td>Usage</td>
          <td class="text-right">{{ metrics.databases.usage.count }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.usage.mean)) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.usage['0.0']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.usage['0.5']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.usage['0.75']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.usage['0.95']) }}</td>
          <td class="text-right">{{ formatNumber2(metrics.databases.usage['0.99']) }}</td>
          <td class="text-right">{{ formatNumber2(filterNaN(metrics.databases.usage.max)) }}</td>
        </tr>
        </tbody>
      </table>
    </div>

    <b-modal ref="metricsModal" size="lg">
      <template #modal-title>
        <h4 class="modal-title" id="showMetricsLabel" v-text="t$('metrics.jvm.threads.dump.title')"></h4>
      </template>
      <metrics-modal :thread-dump="threadData"></metrics-modal>
    </b-modal>
  </div>
</template>

<script lang="ts" src="./metrics.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/metrics/metrics.service.ts
import axios, { AxiosPromise } from 'axios';

export default class MetricsService {
  public getMetrics(): AxiosPromise<any> {
    return axios.get('management/jhimetrics');
  }

  public retrieveThreadDump(): AxiosPromise<any> {
    return axios.get('management/threaddump');
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/configuration/configuration.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';

import { orderAndFilterBy } from '@/shared/computables';
import ConfigurationService from './configuration.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseConfiguration',
  setup() {
    const configurationService = inject('configurationService', () => new ConfigurationService(), true);

    const orderProp = ref('prefix');
    const reverse = ref(false);
    const allConfiguration: Ref<any> = ref({});
    const configuration: Ref<any[]> = ref([]);
    const configKeys: Ref<any[]> = ref([]);
    const filtered = ref('');

    const filteredConfiguration = computed(() =>
      orderAndFilterBy(configuration.value, {
        filterByTerm: filtered.value,
        orderByProp: orderProp.value,
        reverse: reverse.value
      })
    );

    return {
      configurationService,
      orderProp,
      reverse,
      allConfiguration,
      configuration,
      configKeys,
      filtered,
      filteredConfiguration,
      t$: useI18n().t
    };
  },
  mounted() {
    this.init();
  },
  methods: {
    init(): void {
      this.configurationService.loadConfiguration().then(res => {
        this.configuration = res;

        for (const config of this.configuration) {
          if (config.properties !== undefined) {
            this.configKeys.push(Object.keys(config.properties));
          }
        }
      });

      this.configurationService.loadEnvConfiguration().then(res => {
        this.allConfiguration = res;
      });
    },
    changeOrder(prop: string): void {
      this.orderProp = prop;
      this.reverse = !this.reverse;
    },
    keys(dict: any): string[] {
      return dict === undefined ? [] : Object.keys(dict);
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/configuration/configuration.vue
<template>
  <div>
    <h2 id="configuration-page-heading" v-text="t$('configuration.title')" data-cy="configurationPageHeading"></h2>

    <div v-if="allConfiguration && configuration">
      <span v-text="t$('configuration.filter')"></span> <input type="text" v-model="filtered" class="form-control" />
      <h3>Spring configuration</h3>
      <table class="table table-striped table-bordered table-responsive d-table" aria-describedby="Configuration">
        <thead>
        <tr>
          <th class="w-40" v-on:click="changeOrder('prefix')" scope="col">
            <span v-text="t$('configuration.table.prefix')"></span>
          </th>
          <th class="w-60" v-on:click="changeOrder('properties')" scope="col">
            <span v-text="t$('configuration.table.properties')"></span>
          </th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="entry in filteredConfiguration" :key="entry.prefix">
          <td>
            <span>{{ entry.prefix }}</span>
          </td>
          <td>
            <div class="row" v-for="key in keys(entry.properties)" :key="key">
              <div class="col-md-4">{{ key }}</div>
              <div class="col-md-8">
                <span class="float-right badge-secondary break">{{ entry.properties[key] }}</span>
              </div>
            </div>
          </td>
        </tr>
        </tbody>
      </table>
      <div v-for="key in keys(allConfiguration)" :key="key">
        <h4>
          <span>{{ key }}</span>
        </h4>
        <table class="table table-sm table-striped table-bordered table-responsive d-table"
               aria-describedby="Properties">
          <thead>
          <tr>
            <th class="w-40" scope="col">Property</th>
            <th class="w-60" scope="col">Value</th>
          </tr>
          </thead>
          <tbody>
          <tr v-for="item of allConfiguration[key]" :key="item.key">
            <td class="break">{{ item.key }}</td>
            <td class="break">
              <span class="float-right badge-secondary break">{{ item.val }}</span>
            </td>
          </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./configuration.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/configuration/configuration.service.ts
import axios from 'axios';

export default class ConfigurationService {
  public loadConfiguration(): Promise<any> {
    return new Promise(resolve => {
      axios.get('management/configprops').then(res => {
        const properties = [];
        const propertiesObject = this.getConfigPropertiesObjects(res.data);
        for (const key in propertiesObject) {
          if (Object.prototype.hasOwnProperty.call(propertiesObject, key)) {
            properties.push(propertiesObject[key]);
          }
        }

        properties.sort((propertyA, propertyB) => {
          const comparePrefix = propertyA.prefix < propertyB.prefix ? -1 : 1;
          return propertyA.prefix === propertyB.prefix ? 0 : comparePrefix;
        });
        resolve(properties);
      });
    });
  }

  public loadEnvConfiguration(): Promise<any> {
    return new Promise(resolve => {
      axios.get<any>('management/env').then(res => {
        const properties = {};
        const propertySources = res.data['propertySources'];

        for (const propertyObject of propertySources) {
          const name = propertyObject['name'];
          const detailProperties = propertyObject['properties'];
          const vals = [];
          for (const keyDetail in detailProperties) {
            if (Object.prototype.hasOwnProperty.call(detailProperties, keyDetail)) {
              vals.push({ key: keyDetail, val: detailProperties[keyDetail]['value'] });
            }
          }
          properties[name] = vals;
        }
        resolve(properties);
      });
    });
  }

  private getConfigPropertiesObjects(res): any {
    // This code is for Spring Boot 2
    if (res['contexts'] !== undefined) {
      for (const key in res['contexts']) {
        // If the key is not bootstrap, it will be the ApplicationContext Id
        // For default app, it is baseName
        // For microservice, it is baseName-1
        if (!key.startsWith('bootstrap')) {
          return res['contexts'][key]['beans'];
        }
      }
    }
    // by default, use the default ApplicationContext Id
    return res['contexts']['MMSE-App']['beans'];
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/health/health.vue
<template>
  <div>
    <h2>
      <span id="health-page-heading" v-text="t$('health.title')" data-cy="healthPageHeading"></span>
      <button class="btn btn-primary float-right" v-on:click="refresh()" :disabled="updatingHealth">
        <font-awesome-icon icon="sync"></font-awesome-icon>
        <span v-text="t$('health[\'refresh.button\']')"></span>
      </button>
    </h2>
    <div class="table-responsive">
      <table id="healthCheck" class="table table-striped" aria-describedby="Health check">
        <thead>
        <tr>
          <th v-text="t$('health.table.service')" scope="col"></th>
          <th class="text-center" v-text="t$('health.table.status')" scope="col"></th>
          <th class="text-center" v-text="t$('health.details.details')" scope="col"></th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="health of healthData" :key="health.name">
          <td><span v-text="t$('health.indicator.' + baseName(health.name))" /> {{ subSystemName(health.name) }}</td>
          <td class="text-center">
            <span class="badge" :class="getBadgeClass(health.status)"
                  v-text="t$('health.status.' + health.status)"></span>
          </td>
          <td class="text-center">
            <a class="hand" v-on:click="showHealth(health)" v-if="health.details || health.error">
              <font-awesome-icon icon="eye"></font-awesome-icon>
            </a>
          </td>
        </tr>
        </tbody>
      </table>
    </div>
    <b-modal ref="healthModal">
      <template #modal-title>
        <h4 v-if="currentHealth" class="modal-title" id="showHealthLabel">
          <span v-text="t$('health.indicator.' + baseName(currentHealth.name))" />
          {{ subSystemName(currentHealth.name) }}
        </h4>
      </template>
      <health-modal :current-health="currentHealth"></health-modal>
    </b-modal>
  </div>
</template>

<script lang="ts" src="./health.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/health/health-modal.component.ts
import { defineComponent, inject } from 'vue';
import { useI18n } from 'vue-i18n';
import HealthService from './health.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseHealthModal',
  props: {
    currentHealth: {}
  },
  setup() {
    const healthService = inject('healthService', () => new HealthService(), true);

    return {
      healthService,
      t$: useI18n().t
    };
  },
  methods: {
    baseName(name: string): any {
      return this.healthService.getBaseName(name);
    },
    subSystemName(name: string): any {
      return this.healthService.getSubSystemName(name);
    },
    readableValue(value: any): string {
      if (this.currentHealth.name === 'diskSpace') {
        // Should display storage space in an human readable unit
        const val = value / 1073741824;
        if (val > 1) {
          // Value
          return val.toFixed(2) + ' GB';
        }
        return (value / 1048576).toFixed(2) + ' MB';
      }

      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      return value.toString();
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/health/health.service.ts
import axios, { AxiosPromise } from 'axios';

export default class HealthService {
  public separator: string;

  constructor() {
    this.separator = '.';
  }

  public checkHealth(): AxiosPromise<any> {
    return axios.get('management/health');
  }

  public transformHealthData(data: any): any {
    const response = [];
    this.flattenHealthData(response, null, data.components);
    return response;
  }

  public getBaseName(name: string): string {
    if (name) {
      const split = name.split('.');
      return split[0];
    }
  }

  public getSubSystemName(name: string): string {
    if (name) {
      const split = name.split('.');
      split.splice(0, 1);
      const remainder = split.join('.');
      return remainder ? ' - ' + remainder : '';
    }
  }

  public addHealthObject(result: any, isLeaf: boolean, healthObject: any, name: string) {
    const healthData = {
      name,
      details: undefined,
      error: undefined
    };

    const details = {};
    let hasDetails = false;

    for (const key in healthObject) {
      if (Object.prototype.hasOwnProperty.call(healthObject, key)) {
        const value = healthObject[key];
        if (key === 'status' || key === 'error') {
          healthData[key] = value;
        } else {
          if (!this.isHealthObject(value)) {
            details[key] = value;
            hasDetails = true;
          }
        }
      }
    }

    // Add the details
    if (hasDetails) {
      healthData.details = details;
    }

    // Only add nodes if they provide additional information
    if (isLeaf || hasDetails || healthData.error) {
      result.push(healthData);
    }
    return healthData;
  }

  public flattenHealthData(result: any, path: any, data: any): any {
    for (const key in data) {
      if (Object.prototype.hasOwnProperty.call(data, key)) {
        const value = data[key];
        if (this.isHealthObject(value)) {
          if (this.hasSubSystem(value)) {
            this.addHealthObject(result, false, value, this.getModuleName(path, key));
            this.flattenHealthData(result, this.getModuleName(path, key), value);
          } else {
            this.addHealthObject(result, true, value, this.getModuleName(path, key));
          }
        }
      }
    }
    return result;
  }

  public getModuleName(path: any, name: string) {
    if (path && name) {
      return path + this.separator + name;
    } else if (path) {
      return path;
    } else if (name) {
      return name;
    } else {
      return '';
    }
  }

  public hasSubSystem(healthObject: any): any {
    let result = false;

    for (const key in healthObject) {
      if (Object.prototype.hasOwnProperty.call(healthObject, key)) {
        const value = healthObject[key];
        if (value && value.status) {
          result = true;
        }
      }
    }
    return result;
  }

  public isHealthObject(healthObject: any): any {
    let result = false;

    for (const key in healthObject) {
      if (Object.prototype.hasOwnProperty.call(healthObject, key)) {
        if (key === 'status') {
          result = true;
        }
      }
    }
    return result;
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/health/health.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';

import HealthService from './health.service';
import MmseHealthModal from './health-modal.vue';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseHealth',
  components: {
    'health-modal': MmseHealthModal
  },
  setup() {
    const healthService = inject('healthService', () => new HealthService(), true);

    const healthData: Ref<any> = ref(null);
    const currentHealth: Ref<any> = ref(null);
    const updatingHealth = ref(false);

    return {
      healthService,
      healthData,
      currentHealth,
      updatingHealth,
      t$: useI18n().t
    };
  },
  mounted(): void {
    this.refresh();
  },
  methods: {
    baseName(name: any): any {
      return this.healthService.getBaseName(name);
    },
    getBadgeClass(statusState: any): string {
      if (statusState === 'UP') {
        return 'badge-success';
      }
      return 'badge-danger';
    },
    refresh(): void {
      this.updatingHealth = true;
      this.healthService
        .checkHealth()
        .then(res => {
          this.healthData = this.healthService.transformHealthData(res.data);
          this.updatingHealth = false;
        })
        .catch(error => {
          if (error.status === 503) {
            this.healthData = this.healthService.transformHealthData(error.error);
          }
          this.updatingHealth = false;
        });
    },
    showHealth(health: any): void {
      this.currentHealth = health;
      (<any>this.$refs.healthModal).show();
    },
    subSystemName(name: string): string {
      return this.healthService.getSubSystemName(name);
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/health/health-modal.vue
<template>
  <div class="modal-body pad">
    <div v-if="currentHealth && currentHealth.details">
      <h5 v-text="t$('health.details.properties')"></h5>
      <div class="table-responsive">
        <table class="table table-striped" aria-describedby="Health">
          <thead>
          <tr>
            <th class="text-left" v-text="t$('health.details.name')" scope="col"></th>
            <th class="text-left" v-text="t$('health.details.value')" scope="col"></th>
          </tr>
          </thead>
          <tbody>
          <tr v-for="(item, index) in currentHealth.details.details" :key="index">
            <td class="text-left">{{ index }}</td>
            <td class="text-left">{{ readableValue(item) }}</td>
          </tr>
          </tbody>
        </table>
      </div>
    </div>
    <div v-if="currentHealth && currentHealth.error">
      <h4 v-text="t$('health.details.error')"></h4>
      <pre>{{ currentHealth.error }}</pre>
    </div>
  </div>
</template>

<script lang="ts" src="./health-modal.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/docs/docs.component.ts
import { defineComponent } from 'vue';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseDocs'
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/docs/docs.vue
<template>
  <iframe
    src="/swagger-ui/index.html"
    width="100%"
    height="900"
    seamless
    target="_top"
    title="Swagger UI"
    class="border-0"
    data-cy="swagger-frame"
  ></iframe>
</template>

<script lang="ts" src="./docs.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/logs/logs.vue
<template>
  <div class="table-responsive">
    <h2 id="logs-page-heading" v-text="t$('logs.title')" data-cy="logsPageHeading"></h2>

    <div v-if="loggers">
      <p v-text="t$('logs.nbloggers', { total: loggers.length })"></p>

      <span v-text="t$('logs.filter')"></span> <input type="text" v-model="filtered" class="form-control" />

      <table class="table table-sm table-striped table-bordered" aria-describedby="Logs">
        <thead>
        <tr title="click to order">
          <th v-on:click="changeOrder('name')" scope="col"><span v-text="t$('logs.table.name')"></span></th>
          <th v-on:click="changeOrder('level')" scope="col"><span v-text="t$('logs.table.level')"></span></th>
        </tr>
        </thead>

        <tr v-for="logger in filteredLoggers" :key="logger.name">
          <td>
            <small>{{ logger.name }}</small>
          </td>
          <td>
            <button
              v-on:click="updateLevel(logger.name, 'TRACE')"
              :class="logger.level === 'TRACE' ? 'btn-primary' : 'btn-light'"
              class="btn btn-sm"
            >
              TRACE
            </button>
            <button
              v-on:click="updateLevel(logger.name, 'DEBUG')"
              :class="logger.level === 'DEBUG' ? 'btn-success' : 'btn-light'"
              class="btn btn-sm"
            >
              DEBUG
            </button>
            <button
              v-on:click="updateLevel(logger.name, 'INFO')"
              :class="logger.level === 'INFO' ? 'btn-info' : 'btn-light'"
              class="btn btn-sm"
            >
              INFO
            </button>
            <button
              v-on:click="updateLevel(logger.name, 'WARN')"
              :class="logger.level === 'WARN' ? 'btn-warning' : 'btn-light'"
              class="btn btn-sm"
            >
              WARN
            </button>
            <button
              v-on:click="updateLevel(logger.name, 'ERROR')"
              :class="logger.level === 'ERROR' ? 'btn-danger' : 'btn-light'"
              class="btn btn-sm"
            >
              ERROR
            </button>
            <button
              v-on:click="updateLevel(logger.name, 'OFF')"
              :class="logger.level === 'OFF' ? 'btn-secondary' : 'btn-light'"
              class="btn btn-sm"
            >
              OFF
            </button>
          </td>
        </tr>
      </table>
    </div>
  </div>
</template>

<script lang="ts" src="./logs.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/logs/logs.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';

import { orderAndFilterBy } from '@/shared/computables';
import LogsService from './logs.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseLogs',
  setup() {
    const logsService = inject('logsService', () => new LogsService(), true);

    const loggers: Ref<any[]> = ref([]);
    const filtered = ref('');
    const orderProp = ref('name');
    const reverse = ref(false);
    const filteredLoggers = computed(() =>
      orderAndFilterBy(loggers.value, {
        filterByTerm: filtered.value,
        orderByProp: orderProp.value,
        reverse: reverse.value
      })
    );

    return {
      logsService,
      loggers,
      filtered,
      orderProp,
      reverse,
      filteredLoggers,
      t$: useI18n().t
    };
  },
  mounted() {
    this.init();
  },
  methods: {
    init(): void {
      this.logsService.findAll().then(response => {
        this.extractLoggers(response);
      });
    },
    updateLevel(name: string, level: string): void {
      this.logsService.changeLevel(name, level).then(() => {
        this.init();
      });
    },
    changeOrder(orderProp: string): void {
      this.orderProp = orderProp;
      this.reverse = !this.reverse;
    },
    extractLoggers(response) {
      this.loggers = [];
      if (response.data) {
        for (const key of Object.keys(response.data.loggers)) {
          const logger = response.data.loggers[key];
          this.loggers.push({ name: key, level: logger.effectiveLevel });
        }
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/logs/logs.service.ts
import axios, { AxiosPromise } from 'axios';

export default class LogsService {
  public changeLevel(name: string, configuredLevel: string): AxiosPromise<any> {
    return axios.post(`management/loggers/${name}`, { configuredLevel });
  }

  public findAll(): AxiosPromise<any> {
    return axios.get('management/loggers');
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management.service.ts
import axios from 'axios';
import buildPaginationQueryOpts from '@/shared/sort/sorts';
import { IUser } from '@/shared/model/user.model';

export default class UserManagementService {
  public get(userId: string): Promise<any> {
    return axios.get(`api/admin/users/${userId}`);
  }

  public create(user: IUser): Promise<any> {
    return axios.post('api/admin/users', user);
  }

  public update(user: IUser): Promise<any> {
    return axios.put('api/admin/users', user);
  }

  public remove(userId: number): Promise<any> {
    return axios.delete(`api/admin/users/${userId}`);
  }

  public retrieve(req?: any): Promise<any> {
    return axios.get(`api/admin/users?${buildPaginationQueryOpts(req)}`);
  }

  public retrieveAuthorities(): Promise<any> {
    return axios.get('api/authorities');
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management-edit.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useVuelidate } from '@vuelidate/core';
import { email, maxLength, minLength, required } from '@vuelidate/validators';
import UserManagementService from './user-management.service';
import { IUser, User } from '@/shared/model/user.model';
import { useAlertService } from '@/shared/alert/alert.service';
import { useRoute, useRouter } from 'vue-router';
import languages from '@/shared/config/languages';

const loginValidator = (value: string) => {
  if (!value) {
    return true;
  }
  return /^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/.test(value);
};

const validations: any = {
  userAccount: {
    login: {
      required,
      maxLength: maxLength(254),
      pattern: loginValidator
    },
    firstName: {
      maxLength: maxLength(50)
    },
    lastName: {
      maxLength: maxLength(50)
    },
    email: {
      required,
      email,
      minLength: minLength(5),
      maxLength: maxLength(50)
    },
  },
};

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseUserManagementEdit',
  validations,
  setup() {
    const route = useRoute();
    const router = useRouter();

    const alertService = inject('alertService', () => useAlertService(), true);
    const userManagementService = inject('userManagementService', () => new UserManagementService(), true);
    const previousState = () => router.go(-1);

    const userAccount: Ref<IUser> = ref({ ...new User(), authorities: [] });
    const isSaving: Ref<boolean> = ref(false);
    const authorities: Ref<string[]> = ref([]);

    const initAuthorities = async () => {
      const response = await userManagementService.retrieveAuthorities();
      authorities.value = response.data;
    };

    const loadUser = async (userId: string) => {
      const response = await userManagementService.get(userId);
      userAccount.value = response.data;
    };

    initAuthorities();
    const userId = route.params?.userId;
    if (userId) {
      loadUser(userId);
    }

    return {
      alertService,
      userAccount,
      isSaving,
      authorities,
      userManagementService,
      previousState,
      v$: useVuelidate(),
      languages: languages(),
      t$: useI18n().t
    };
  },
  methods: {
    save(): void {
      this.isSaving = true;
      if (this.userAccount.id) {
        this.userManagementService
          .update(this.userAccount)
          .then(res => {
            this.returnToList();
            this.alertService.showInfo(this.getToastMessageFromHeader(res));
          })
          .catch(error => {
            this.isSaving = true;
            this.alertService.showHttpError(error.response);
          });
      } else {
        this.userManagementService
          .create(this.userAccount)
          .then(res => {
            this.returnToList();
            this.alertService.showSuccess(this.getToastMessageFromHeader(res));
          })
          .catch(error => {
            this.isSaving = true;
            this.alertService.showHttpError(error.response);
          });
      }
    },

    returnToList(): void {
      this.isSaving = false;
      this.previousState();
    },

    getToastMessageFromHeader(res: any): string {
      return this.t$(res.headers['x-mmseapp-alert'], {
        param: decodeURIComponent(res.headers['x-mmseapp-params'].replace(/\+/g, ' '))
      }).toString();
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management-edit.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <form name="editForm" role="form" novalidate v-on:submit.prevent="save()" v-if="userAccount">
        <h2 id="myUserLabel" v-text="t$('userManagement.home.createOrEditLabel')"></h2>
        <div>
          <div class="form-group" :hidden="!userAccount.id">
            <label v-text="t$('global.field.id')"></label>
            <input type="text" class="form-control" name="id" v-model="userAccount.id" readonly />
          </div>

          <div class="form-group">
            <label class="form-control-label" v-text="t$('userManagement.login')"></label>
            <input
              type="text"
              class="form-control"
              name="login"
              :class="{ valid: !v$.userAccount.login.$invalid, invalid: v$.userAccount.login.$invalid }"
              v-model="v$.userAccount.login.$model"
            />

            <div v-if="v$.userAccount.login.$anyDirty && v$.userAccount.login.$invalid">
              <small class="form-text text-danger" v-if="!v$.userAccount.login.required"
                     v-text="t$('entity.validation.required')"></small>

              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.login.maxLength"
                v-text="t$('entity.validation.maxlength', { max: 50 })"
              ></small>

              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.login.pattern"
                v-text="t$('entity.validation.patternLogin')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="firstName" v-text="t$('userManagement.firstName')"></label>
            <input
              type="text"
              class="form-control"
              id="firstName"
              name="firstName"
              v-bind:placeholder="t$('settings.form[\'firstname.placeholder\']')"
              :class="{ valid: !v$.userAccount.firstName.$invalid, invalid: v$.userAccount.firstName.$invalid }"
              v-model="v$.userAccount.firstName.$model"
            />
            <div v-if="v$.userAccount.firstName.$anyDirty && v$.userAccount.firstName.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.firstName.maxLength"
                v-text="t$('entity.validation.maxlength', { max: 50 })"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="lastName" v-text="t$('userManagement.lastName')"></label>
            <input
              type="text"
              class="form-control"
              id="lastName"
              name="lastName"
              v-bind:placeholder="t$('settings.form[\'lastname.placeholder\']')"
              :class="{ valid: !v$.userAccount.lastName.$invalid, invalid: v$.userAccount.lastName.$invalid }"
              v-model="v$.userAccount.lastName.$model"
            />
            <div v-if="v$.userAccount.lastName.$anyDirty && v$.userAccount.lastName.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.lastName.maxLength"
                v-text="t$('entity.validation.maxlength', { max: 50 })"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="email" v-text="t$('userManagement.email')"></label>
            <input
              type="email"
              class="form-control"
              id="email"
              name="email"
              v-bind:placeholder="t$('global.form[\'email.placeholder\']')"
              :class="{ valid: !v$.userAccount.email.$invalid, invalid: v$.userAccount.email.$invalid }"
              v-model="v$.userAccount.email.$model"
              email
              required
            />
            <div v-if="v$.userAccount.email.$anyDirty && v$.userAccount.email.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.email.required"
                v-text="t$('global.messages.validate.email.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.email.email"
                v-text="t$('global.messages.validate.email.invalid')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.email.minLength"
                v-text="t$('global.messages.validate.email.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.userAccount.email.maxLength"
                v-text="t$('global.messages.validate.email.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-check">
            <label class="form-check-label" for="activated">
              <input
                class="form-check-input"
                :disabled="userAccount.id === null"
                type="checkbox"
                id="activated"
                name="activated"
                v-model="userAccount.activated"
              />
              <span v-text="t$('userManagement.activated')"></span>
            </label>
          </div>

          <div class="form-group" v-if="languages && Object.keys(languages).length > 0">
            <label for="langKey" v-text="t$('userManagement.langKey')"></label>
            <select class="form-control" id="langKey" name="langKey" v-model="userAccount.langKey">
              <option v-for="(language, key) in languages" :value="key" :key="key">{{ language.name }}</option>
            </select>
          </div>
          <div class="form-group">
            <label v-text="t$('userManagement.profiles')"></label>
            <select class="form-control" multiple name="authority" v-model="userAccount.authorities">
              <option v-for="authority of authorities" :value="authority" :key="authority">{{ authority }}</option>
            </select>
          </div>
        </div>
        <div>
          <button type="button" class="btn btn-secondary" v-on:click="previousState()">
            <font-awesome-icon icon="ban"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.cancel')"></span>
          </button>
          <button type="submit" :disabled="v$.userAccount.$invalid || isSaving" class="btn btn-primary">
            <font-awesome-icon icon="save"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.save')"></span>
          </button>
        </div>
      </form>
    </div>
  </div>
</template>

<script lang="ts" src="./user-management-edit.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management-view.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <div v-if="user">
        <h2 class="jh-entity-heading">
          <span v-text="t$('userManagement.detail.title')"></span> [<strong>{{ user.login }}</strong
        >]
        </h2>
        <dl class="row jh-entity-details">
          <dt><span v-text="t$('userManagement.login')"></span></dt>
          <dd>
            <span>{{ user.login }}</span>
            <b-badge variant="success" v-if="user.activated" v-text="t$('userManagement.activated')"></b-badge>
            <b-badge variant="danger" v-if="!user.activated" v-text="t$('userManagement.deactivated')"></b-badge>
          </dd>
          <dt><span v-text="t$('userManagement.firstName')"></span></dt>
          <dd>{{ user.firstName }}</dd>
          <dt><span v-text="t$('userManagement.lastName')"></span></dt>
          <dd>{{ user.lastName }}</dd>
          <dt><span v-text="t$('userManagement.email')"></span></dt>
          <dd>{{ user.email }}</dd>
          <dt><span v-text="t$('userManagement.langKey')"></span></dt>
          <dd>{{ user.langKey }}</dd>
          <dt><span v-text="t$('userManagement.createdBy')"></span></dt>
          <dd>{{ user.createdBy }}</dd>
          <dt><span v-text="t$('userManagement.createdDate')"></span></dt>
          <dd>
            <span v-if="user.createdDate">
              {{ formatDate(user.createdDate) }}
            </span>
          </dd>
          <dt><span v-text="t$('userManagement.lastModifiedBy')"></span></dt>
          <dd>{{ user.lastModifiedBy }}</dd>
          <dt><span v-text="t$('userManagement.lastModifiedDate')"></span></dt>
          <dd>
            <span v-if="user.lastModifiedDate">
              {{ formatDate(user.lastModifiedDate) }}
            </span>
          </dd>
          <dt><span v-text="t$('userManagement.profiles')"></span></dt>
          <dd>
            <ul class="list-unstyled">
              <li v-for="authority of user.authorities" :key="authority">
                <b-badge variant="info">{{ authority }}</b-badge>
              </li>
            </ul>
          </dd>
        </dl>
        <router-link custom v-slot="{ navigate }" :to="{ name: 'MmseUser' }">
          <button @click="navigate" class="btn btn-info">
            <font-awesome-icon icon="arrow-left"></font-awesome-icon>&nbsp;<span
            v-text="t$('entity.action.back')"></span>
          </button>
        </router-link>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./user-management-view.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management-view.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute } from 'vue-router';

import { useDateFormat } from '@/shared/composables';
import UserManagementService from './user-management.service';
import { useAlertService } from '@/shared/alert/alert.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseUserManagementView',
  setup() {
    const route = useRoute();
    const { formatDateLong: formatDate } = useDateFormat();

    const alertService = inject('alertService', () => useAlertService(), true);
    const userManagementService = inject('userManagementService', () => new UserManagementService(), true);

    const user: Ref<any> = ref(null);

    async function loadUser(userId: string) {
      try {
        const response = await userManagementService.get(userId);
        user.value = response.data;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    }

    loadUser(route.params?.userId);

    return {
      formatDate,
      alertService,
      userManagementService,
      user,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management.vue
<template>
  <div>
    <h2>
      <span id="user-management-page-heading" v-text="t$('userManagement.home.title')"
            data-cy="userManagementPageHeading"></span>

      <div class="d-flex justify-content-end">
        <button class="btn btn-info mr-2" v-on:click="handleSyncList" :disabled="isLoading">
          <font-awesome-icon icon="sync" :spin="isLoading"></font-awesome-icon>
          <span v-text="t$('userManagement.home.refreshListLabel')"></span>
        </button>
        <router-link custom v-slot="{ navigate }" :to="{ name: 'MmseUserCreate' }">
          <button @click="navigate" class="btn btn-primary jh-create-entity">
            <font-awesome-icon icon="plus"></font-awesome-icon>
            <span v-text="t$('userManagement.home.createLabel')"></span>
          </button>
        </router-link>
      </div>
    </h2>
    <div class="table-responsive" v-if="users">
      <table class="table table-striped" aria-describedby="Users">
        <thead>
        <tr>
          <th scope="col" v-on:click="changeOrder('id')">
            <span v-text="t$('global.field.id')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse" :field-name="'id'"></jhi-sort-indicator>
          </th>
          <th scope="col" v-on:click="changeOrder('login')">
            <span v-text="t$('userManagement.login')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'login'"></jhi-sort-indicator>
          </th>
          <th scope="col" v-on:click="changeOrder('email')">
            <span v-text="t$('userManagement.email')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'email'"></jhi-sort-indicator>
          </th>
          <th scope="col"></th>
          <th scope="col" v-on:click="changeOrder('langKey')">
            <span v-text="t$('userManagement.langKey')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'langKey'"></jhi-sort-indicator>
          </th>
          <th scope="col"><span v-text="t$('userManagement.profiles')"></span></th>
          <th scope="col" v-on:click="changeOrder('createdDate')">
            <span v-text="t$('userManagement.createdDate')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'createdDate'"></jhi-sort-indicator>
          </th>
          <th scope="col" v-on:click="changeOrder('lastModifiedBy')">
            <span v-text="t$('userManagement.lastModifiedBy')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'lastModifiedBy'"></jhi-sort-indicator>
          </th>
          <th scope="col" id="modified-date-sort" v-on:click="changeOrder('lastModifiedDate')">
            <span v-text="t$('userManagement.lastModifiedDate')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'lastModifiedDate'"></jhi-sort-indicator>
          </th>
          <th scope="col"></th>
        </tr>
        </thead>
        <tbody v-if="users">
        <tr v-for="user in users" :key="user.id" :id="user.login">
          <td>
            <router-link :to="{ name: 'MmseUserView', params: { userId: user.login } }">{{ user.id }}</router-link>
          </td>
          <td>{{ user.login }}</td>
          <td class="jhi-user-email">{{ user.email }}</td>
          <td>
            <button
              class="btn btn-danger btn-sm deactivated"
              v-on:click="setActive(user, true)"
              v-if="!user.activated"
              v-text="t$('userManagement.deactivated')"
            ></button>
            <button
              class="btn btn-success btn-sm"
              v-on:click="setActive(user, false)"
              v-if="user.activated"
              :disabled="username === user.login"
              v-text="t$('userManagement.activated')"
            ></button>
          </td>
          <td>{{ user.langKey }}</td>
          <td>
            <div v-for="authority of user.authorities" :key="authority">
              <span class="badge badge-info">{{ authority }}</span>
            </div>
          </td>
          <td>{{ formatDate(user.createdDate) }}</td>
          <td>{{ user.lastModifiedBy }}</td>
          <td>{{ formatDate(user.lastModifiedDate) }}</td>
          <td class="text-right">
            <div class="btn-group">
              <router-link :to="{ name: 'MmseUserView', params: { userId: user.login } }" custom v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-info btn-sm details">
                  <font-awesome-icon icon="eye"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.view')"></span>
                </button>
              </router-link>
              <router-link :to="{ name: 'MmseUserEdit', params: { userId: user.login } }" custom v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-primary btn-sm edit">
                  <font-awesome-icon icon="pencil-alt"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.edit')"></span>
                </button>
              </router-link>
              <b-button v-on:click="prepareRemove(user)" variant="danger" class="btn btn-sm delete"
                        :disabled="username === user.login">
                <font-awesome-icon icon="times"></font-awesome-icon>
                <span class="d-none d-md-inline" v-text="t$('entity.action.delete')"></span>
              </b-button>
            </div>
          </td>
        </tr>
        </tbody>
      </table>
      <b-modal ref="removeUser" id="removeUser" v-bind:title="t$('entity.delete.title')" @ok="deleteUser()">
        <div class="modal-body">
          <p id="mmse-delete-user-heading" v-text="t$('userManagement.delete.question', { login: removeId })"></p>
        </div>
        <template #modal-footer>
          <div>
            <button type="button" class="btn btn-secondary" v-text="t$('entity.action.cancel')"
                    v-on:click="closeDialog()"></button>
            <button
              type="button"
              class="btn btn-primary"
              id="confirm-delete-user"
              v-text="t$('entity.action.delete')"
              v-on:click="deleteUser()"
            ></button>
          </div>
        </template>
      </b-modal>
    </div>
    <div v-show="users && users.length > 0">
      <div class="row justify-content-center">
        <jhi-item-count :page="page" :total="queryCount" :itemsPerPage="itemsPerPage"></jhi-item-count>
      </div>
      <div class="row justify-content-center">
        <b-pagination size="md" :total-rows="totalItems" v-model="page" :per-page="itemsPerPage"
                      :change="loadPage(page)"></b-pagination>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./user-management.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/admin/user-management/user-management.component.ts
import { ComputedRef, defineComponent, inject, Ref, ref } from 'vue';
import { useI18n } from 'vue-i18n';
import UserManagementService from './user-management.service';
import { useAlertService } from '@/shared/alert/alert.service';

import { useDateFormat } from '@/shared/composables';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'MmseUserManagementComponent',
  mounted(): void {
    this.loadAll();
  },
  setup(prop) {
    const alertService = inject('alertService', () => useAlertService(), true);
    const { formatDateShort: formatDate } = useDateFormat();
    const userManagementService = inject('userManagementService', () => new UserManagementService(), true);
    const username = inject<ComputedRef<string>>('currentUsername');

    const error = ref('');
    const success = ref('');
    const itemsPerPage = ref(20);
    const page = ref(1);
    const previousPage = ref(1);
    const propOrder = ref('id');
    const reverse = ref(false);
    const isLoading = ref(false);
    const removeId: Ref<number> = ref(null);
    const users: Ref<any[]> = ref([]);
    const totalItems = ref(0);
    const queryCount: Ref<number> = ref(null);

    return {
      formatDate,
      userManagementService,
      alertService,
      error,
      success,
      itemsPerPage,
      page,
      previousPage,
      propOrder,
      reverse,
      isLoading,
      removeId,
      users,
      username,
      totalItems,
      queryCount,
      t$: useI18n().t
    };
  },
  methods: {
    setActive(user, isActivated): void {
      user.activated = isActivated;
      this.userManagementService
        .update(user)
        .then(() => {
          this.error = null;
          this.success = 'OK';
          this.loadAll();
        })
        .catch(() => {
          this.success = null;
          this.error = 'ERROR';
          user.activated = false;
        });
    },
    loadAll(): void {
      this.isLoading = true;

      this.userManagementService
        .retrieve({
          sort: this.sort(),
          page: this.page - 1,
          size: this.itemsPerPage
        })
        .then(res => {
          this.isLoading = false;
          this.users = res.data;
          this.totalItems = Number(res.headers['x-total-count']);
          this.queryCount = this.totalItems;
        })
        .catch(() => {
          this.isLoading = false;
        });
    },
    handleSyncList(): void {
      this.loadAll();
    },
    sort(): any {
      const result = [this.propOrder + ',' + (this.reverse ? 'desc' : 'asc')];
      if (this.propOrder !== 'id') {
        result.push('id');
      }
      return result;
    },
    loadPage(page: number): void {
      if (page !== this.previousPage) {
        this.previousPage = page;
        this.transition();
      }
    },
    transition(): void {
      this.loadAll();
    },
    changeOrder(propOrder: string): void {
      this.propOrder = propOrder;
      this.reverse = !this.reverse;
      this.transition();
    },
    deleteUser(): void {
      this.userManagementService
        .remove(this.removeId)
        .then(res => {
          this.alertService.showInfo(
            this.t$(res.headers['x-mmseapp-alert'].toString(), {
              param: decodeURIComponent(res.headers['x-mmseapp-params'].replace(/\+/g, ' '))
            }),
            { variant: 'danger' }
          );
          this.removeId = null;
          this.loadAll();
          this.closeDialog();
        })
        .catch(error => {
          this.alertService.showHttpError(error.response);
        });
    },
    prepareRemove(instance): void {
      this.removeId = instance.login;
      if (<any>this.$refs.removeUser) {
        (<any>this.$refs.removeUser).show();
      }
    },
    closeDialog(): void {
      if (<any>this.$refs.removeUser) {
        (<any>this.$refs.removeUser).hide();
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/jhi-item-count.vue
<template>
  <div class="info jhi-item-count">
    <span v-text="t$('global.item-count', { first, second, total })"></span>
  </div>
</template>

<script lang="ts" src="./jhi-item-count.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/jhi-item-count.component.ts
import { computed, defineComponent } from 'vue';
import { useI18n } from 'vue-i18n';

export default defineComponent({
  compatConfig: { MODE: 3 },
  props: {
    page: Number,
    total: Number,
    itemsPerPage: Number
  },
  setup(props) {
    const first = computed(() => ((props.page - 1) * props.itemsPerPage === 0 ? 1 : (props.page - 1) * props.itemsPerPage + 1));
    const second = computed(() => (props.page * props.itemsPerPage < props.total ? props.page * props.itemsPerPage : props.total));

    return {
      first,
      second,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/computables/index.ts
export * from './arrays';


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/computables/arrays.ts
const compareString = (a: string, b: string): number => {
  if (b == null) return 1;
  if (a == null) return -1;

  return a.localeCompare(b);
};

const asString = (val): string => {
  return typeof val === 'string' ? val : '' + val;
};

const compareAny = (a, b): number => {
  if (b == null) return 1;
  if (a == null) return -1;

  return a - b;
};

export type OrderByOptions = { orderByProp: string; reverse?: boolean };

export const orderBy = (array: any[], opts: OrderByOptions) => {
  if (!Array.isArray(array)) return array;

  const { orderByProp, reverse = false } = opts;
  let sorted: any[];
  if (array.some(el => typeof el[orderByProp] === 'string')) {
    sorted = array.sort((a, b) => compareString(asString(a), asString(b)));
  } else {
    sorted = array.sort((a, b) => compareAny(a, b));
  }
  if (reverse) {
    sorted.reverse();
  }
  return sorted;
};

export type FilterByOptions = { filterByTerm: string; filterMaxDepth?: number };

const filterObject = (val: any, opts: FilterByOptions): boolean => {
  const { filterByTerm, filterMaxDepth = 2 } = opts;
  if (typeof val === 'string') {
    return val.toLocaleLowerCase().startsWith(filterByTerm);
  }
  if (typeof val === 'object') {
    if (filterMaxDepth < 0) return false;
    for (const value of Object.values(val)) {
      if (filterObject(value, { filterByTerm, filterMaxDepth: filterMaxDepth - 1 })) return true;
    }
    return false;
  }
  return ('' + val).toLocaleLowerCase().startsWith(filterByTerm);
};

export const filterBy = (array: any, opts: FilterByOptions) => {
  return Array.isArray(array) && opts.filterByTerm
    ? array.filter(el => filterObject(el, { ...opts, filterByTerm: opts.filterByTerm.toLocaleLowerCase() }))
    : array;
};

export const orderAndFilterBy = (array: any, opts: FilterByOptions & OrderByOptions) => orderBy(filterBy(array, opts), opts);


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/validation.ts
import {
  decimal,
  helpers,
  maxLength,
  maxValue,
  minLength,
  minValue,
  numeric,
  required,
  sameAs
} from '@vuelidate/validators';

export const useValidation = () => {
  return {
    required: (message: string) => helpers.withMessage(message, required),
    decimal: (message: string) => helpers.withMessage(message, decimal),
    numeric: (message: string) => helpers.withMessage(message, numeric),
    sameAs: (message: string, ...args: Parameters<typeof sameAs>) => helpers.withMessage(message, sameAs(...args)),
    minLength: (message: string, ...args: Parameters<typeof minLength>) => helpers.withMessage(message, minLength(...args)),
    maxLength: (message: string, ...args: Parameters<typeof maxLength>) => helpers.withMessage(message, maxLength(...args)),
    minValue: (message: string, ...args: Parameters<typeof minValue>) => helpers.withMessage(message, minValue(...args)),
    maxValue: (message: string, ...args: Parameters<typeof maxValue>) => helpers.withMessage(message, maxValue(...args))
  };
};


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/pagination.ts
import { ref, Ref } from 'vue';

export function usePagination(defaultItemsPerPage = 20) {
  const itemsPerPage = ref(defaultItemsPerPage);
  const page: Ref<number> = ref(1);

  return { itemsPerPage, page };
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/sorting.ts
import { ref } from 'vue';

export function useSorting(defaultPropOrder = 'id', defaultReverse = false) {
  const propOrder = ref(defaultPropOrder);
  const reverse = ref(defaultReverse);

  const changeOrder = (newOrder: string) => {
    if (propOrder.value === newOrder) {
      reverse.value = !reverse.value;
    } else {
      reverse.value = false;
    }
    propOrder.value = newOrder;
  };

  const getSort = (): Array<any> => {
    const result = [propOrder.value + ',' + (reverse.value ? 'desc' : 'asc')];
    if (propOrder.value !== 'id') {
      result.push('id');
    }
    return result;
  };

  return { propOrder, reverse, changeOrder, getSort };
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/infinite-scroll.ts
import { ref } from 'vue';
import { useIntersectionObserver } from '@vueuse/core';

export function useInfiniteScroll(callback: () => void) {
  const infiniteScrollEl = ref<HTMLElement>(null);

  const intersectionObserver = useIntersectionObserver(
    infiniteScrollEl,
    intersection => {
      if (intersection[0].isIntersecting) {
        console.log('Intersecting, loading more data...'); // Log for debugging
        callback();
      } else {
        console.log('Not intersecting'); // Log for debugging
      }
    },
    {
      threshold: 0.5,
      immediate: false
    }
  );

  return { infiniteScrollEl, intersectionObserver };
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/index.ts
export { useDateFormat } from './date-format';
export { useValidation } from './validation';


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/date-format.ts
import { Ref } from 'vue';
import dayjs from 'dayjs';
import { useI18n } from 'vue-i18n';

export const DATE_FORMAT = 'YYYY-MM-DD';
export const DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm';

export const DATE_TIME_LONG_FORMAT = 'YYYY-MM-DDTHH:mm';

export const useDateFormat = ({ entityRef }: { entityRef?: Ref<Record<string, any>> } = {}) => {
  const formatDate = value => (value ? dayjs(value).format(DATE_TIME_FORMAT) : '');
  const dateFormatUtils = {
    convertDateTimeFromServer: (date: Date): string => (date && dayjs(date).isValid() ? dayjs(date).format(DATE_TIME_LONG_FORMAT) : null),
    formatDate,
    formatDuration: value => (value ? dayjs.duration(value).humanize() ?? value : '')
  };
  const entityUtils = entityRef
    ? {
      ...dateFormatUtils,
      updateInstantField: (field: string, event: any) => {
        if (event.target?.value) {
          entityRef.value[field] = dayjs(event.target.value, DATE_TIME_LONG_FORMAT);
        } else {
          entityRef.value[field] = null;
        }
      },
      updateZonedDateTimeField: (field: string, event: any) => {
        if (event.target?.value) {
          entityRef.value[field] = dayjs(event.target.value, DATE_TIME_LONG_FORMAT);
        } else {
          entityRef.value[field] = null;
        }
      }
    }
    : {};

  const i18n = useI18n();
  const formatDateI18N = (date, format = 'short') => (date ? i18n.d(Date.parse(date), format) : null);
  const i18nUtils = {
    formatDateI18N,
    formatDateLong: date => formatDateI18N(date, 'long'),
    formatDateShort: date => formatDateI18N(date, 'short')
  };

  return {
    ...dateFormatUtils,
    ...entityUtils,
    ...i18nUtils
  };
};


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/composables/useInfiniteScroll.ts
import { onBeforeMount, onBeforeUnmount } from 'vue';

export function useInfiniteScroll(checkScroll: () => void) {
  onBeforeMount(() => {
    window.addEventListener('scroll', checkScroll);
  });

  onBeforeUnmount(() => {
    window.removeEventListener('scroll', checkScroll);
  });
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/sort/sorts.ts
export default function buildPaginationQueryOpts(paginationQuery) {
  if (paginationQuery) {
    return Object.entries(paginationQuery)
      .map(([paramName, paramValue]) => {
        if (Array.isArray(paramValue)) {
          return paramValue.map(eachValue => `${paramName}=${eachValue}`).join('&');
        }
        return `${paramName}=${paramValue}`;
      })
      .join('&');
  }
  return '';
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/sort/jhi-sort-indicator.vue
<template>
  <font-awesome-icon
    :icon="currentOrder === fieldName ? (reverse ? 'sort-down' : 'sort-up') : 'sort'"></font-awesome-icon>
</template>

<script lang="ts" src="./jhi-sort-indicator.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/sort/jhi-sort-indicator.component.ts
import { defineComponent } from 'vue';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'JhiSortIndicatorComponent',
  props: {
    currentOrder: String,
    fieldName: String,
    reverse: Boolean
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/languages.ts
const languages = () => ({
  en: { name: 'English' },
  et: { name: 'Eesti' }
  // jhipster-needle-i18n-language-key-pipe - JHipster will add/remove languages in this object
});

export default languages;


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/config-bootstrap-vue.ts
import {
  BAlert,
  BBadge,
  BButton,
  BCollapse,
  BDropdown,
  BDropdownItem,
  BForm,
  BFormCheckbox,
  BFormDatepicker,
  BFormGroup,
  BFormInput,
  BInputGroup,
  BInputGroupPrepend,
  BLink,
  BModal,
  BNavbar,
  BNavbarBrand,
  BNavbarNav,
  BNavbarToggle,
  BNavItem,
  BNavItemDropdown,
  BPagination,
  BProgress,
  BProgressBar,
  ToastPlugin,
  VBModal
} from 'bootstrap-vue';

export function initBootstrapVue(vue) {
  vue.use(ToastPlugin);

  vue.component('b-badge', BBadge);
  vue.component('b-dropdown', BDropdown);
  vue.component('b-dropdown-item', BDropdownItem);
  vue.component('b-link', BLink);
  vue.component('b-alert', BAlert);
  vue.component('b-button', BButton);
  vue.component('b-navbar', BNavbar);
  vue.component('b-navbar-nav', BNavbarNav);
  vue.component('b-navbar-brand', BNavbarBrand);
  vue.component('b-navbar-toggle', BNavbarToggle);
  vue.component('b-pagination', BPagination);
  vue.component('b-progress', BProgress);
  vue.component('b-progress-bar', BProgressBar);
  vue.component('b-form', BForm);
  vue.component('b-form-input', BFormInput);
  vue.component('b-form-group', BFormGroup);
  vue.component('b-form-checkbox', BFormCheckbox);
  vue.component('b-collapse', BCollapse);
  vue.component('b-nav-item', BNavItem);
  vue.component('b-nav-item-dropdown', BNavItemDropdown);
  vue.component('b-modal', BModal);
  vue.directive('b-modal', VBModal);
  vue.component('b-form-datepicker', BFormDatepicker);
  vue.component('b-input-group', BInputGroup);
  vue.component('b-input-group-prepend', BInputGroupPrepend);
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/axios-interceptor.ts
import axios from 'axios';

const TIMEOUT = 1000000;
const onRequestSuccess = config => {
  const token = localStorage.getItem('mmse-authenticationToken') || sessionStorage.getItem('mmse-authenticationToken');
  if (token) {
    if (!config.headers) {
      config.headers = {};
    }
    config.headers.Authorization = `Bearer ${token}`;
  }
  config.timeout = TIMEOUT;
  config.url = `${SERVER_API_URL}${config.url}`;
  return config;
};
const setupAxiosInterceptors = (onUnauthenticated, onServerError) => {
  const onResponseError = err => {
    const status = err.status || err.response.status;
    if (status === 403 || status === 401) {
      return onUnauthenticated(err);
    }
    if (status >= 500) {
      return onServerError(err);
    }
    return Promise.reject(err);
  };

  if (axios.interceptors) {
    axios.interceptors.request.use(onRequestSuccess);
    axios.interceptors.response.use(res => res, onResponseError);
  }
};

export { onRequestSuccess, setupAxiosInterceptors };


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/config.ts
import { createI18n, IntlDateTimeFormats } from 'vue-i18n';
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';

import { library } from '@fortawesome/fontawesome-svg-core';
import { faArrowLeft } from '@fortawesome/free-solid-svg-icons/faArrowLeft';
import { faAsterisk } from '@fortawesome/free-solid-svg-icons/faAsterisk';
import { faBan } from '@fortawesome/free-solid-svg-icons/faBan';
import { faBars } from '@fortawesome/free-solid-svg-icons/faBars';
import { faBell } from '@fortawesome/free-solid-svg-icons/faBell';
import { faBook } from '@fortawesome/free-solid-svg-icons/faBook';
import { faCloud } from '@fortawesome/free-solid-svg-icons/faCloud';
import { faCogs } from '@fortawesome/free-solid-svg-icons/faCogs';
import { faDatabase } from '@fortawesome/free-solid-svg-icons/faDatabase';
import { faEye } from '@fortawesome/free-solid-svg-icons/faEye';
import { faFlag } from '@fortawesome/free-solid-svg-icons/faFlag';
import { faHeart } from '@fortawesome/free-solid-svg-icons/faHeart';
import { faHome } from '@fortawesome/free-solid-svg-icons/faHome';
import { faList } from '@fortawesome/free-solid-svg-icons/faList';
import { faLock } from '@fortawesome/free-solid-svg-icons/faLock';
import { faPencilAlt } from '@fortawesome/free-solid-svg-icons/faPencilAlt';
import { faPlus } from '@fortawesome/free-solid-svg-icons/faPlus';
import { faRoad } from '@fortawesome/free-solid-svg-icons/faRoad';
import { faSave } from '@fortawesome/free-solid-svg-icons/faSave';
import { faSearch } from '@fortawesome/free-solid-svg-icons/faSearch';
import { faSignInAlt } from '@fortawesome/free-solid-svg-icons/faSignInAlt';
import { faSignOutAlt } from '@fortawesome/free-solid-svg-icons/faSignOutAlt';
import { faSort } from '@fortawesome/free-solid-svg-icons/faSort';
import { faSortDown } from '@fortawesome/free-solid-svg-icons/faSortDown';
import { faSortUp } from '@fortawesome/free-solid-svg-icons/faSortUp';
import { faSync } from '@fortawesome/free-solid-svg-icons/faSync';
import { faTachometerAlt } from '@fortawesome/free-solid-svg-icons/faTachometerAlt';
import { faTasks } from '@fortawesome/free-solid-svg-icons/faTasks';
import { faThList } from '@fortawesome/free-solid-svg-icons/faThList';
import { faTimesCircle } from '@fortawesome/free-solid-svg-icons/faTimesCircle';
import { faTimes } from '@fortawesome/free-solid-svg-icons/faTimes';
import { faTrash } from '@fortawesome/free-solid-svg-icons/faTrash';
import { faUser } from '@fortawesome/free-solid-svg-icons/faUser';
import { faUserPlus } from '@fortawesome/free-solid-svg-icons/faUserPlus';
import { faUsers } from '@fortawesome/free-solid-svg-icons/faUsers';
import { faUsersCog } from '@fortawesome/free-solid-svg-icons/faUsersCog';
import { faWrench } from '@fortawesome/free-solid-svg-icons/faWrench';
import { faMicrophone } from '@fortawesome/free-solid-svg-icons/faMicrophone';
import { faStop } from '@fortawesome/free-solid-svg-icons/faStop';

const datetimeFormats: IntlDateTimeFormats = {
  en: {
    short: {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    },
    medium: {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      weekday: 'short',
      hour: 'numeric',
      minute: 'numeric'
    },
    long: {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long',
      hour: 'numeric',
      minute: 'numeric'
    },
  },
  et: {
    short: {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: 'numeric',
      minute: 'numeric'
    },
    medium: {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      weekday: 'short',
      hour: 'numeric',
      minute: 'numeric'
    },
    long: {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      weekday: 'long',
      hour: 'numeric',
      minute: 'numeric'
    },
  },
  // jhipster-needle-i18n-language-date-time-format - JHipster will add/remove format options in this object
};

export function initFortAwesome(vue) {
  vue.component('font-awesome-icon', FontAwesomeIcon);

  library.add(
    faArrowLeft,
    faAsterisk,
    faBan,
    faBars,
    faBell,
    faBook,
    faCloud,
    faCogs,
    faDatabase,
    faEye,
    faFlag,
    faHeart,
    faHome,
    faList,
    faLock,
    faPencilAlt,
    faPlus,
    faRoad,
    faSave,
    faSearch,
    faSignInAlt,
    faSignOutAlt,
    faSort,
    faSortDown,
    faSortUp,
    faSync,
    faTachometerAlt,
    faTasks,
    faThList,
    faTimes,
    faTimesCircle,
    faTrash,
    faUser,
    faUserPlus,
    faUsers,
    faUsersCog,
    faWrench,
    faMicrophone,
    faStop
  );
}

export function initI18N(opts: any = {}) {
  return createI18n({
    missingWarn: false,
    fallbackWarn: false,
    legacy: false,
    datetimeFormats,
    silentTranslationWarn: true,
    ...opts
  });
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/dayjs.ts
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import duration from 'dayjs/plugin/duration';
import relativeTime from 'dayjs/plugin/relativeTime';

// jhipster-needle-i18n-language-dayjs-imports - JHipster will import languages from dayjs here
import 'dayjs/locale/en';
import 'dayjs/locale/et';

// DAYJS CONFIGURATION
dayjs.extend(customParseFormat);
dayjs.extend(duration);
dayjs.extend(relativeTime);


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/store/translation-store.ts
import { defineStore } from 'pinia';

interface TranslationState {
  currentLanguage: string;
}

export const useTranslationStore = defineStore('translationStore', {
  state: (): TranslationState => ({
    currentLanguage: undefined
  }),
  actions: {
    setCurrentLanguage(newLanguage) {
      this.currentLanguage = newLanguage;
      localStorage.setItem('currentLanguage', newLanguage);
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/config/store/account-store.ts
import { defineStore } from 'pinia';

export interface AccountStateStorable {
  logon: boolean;
  userIdentity: null | any;
  authenticated: boolean;
  profilesLoaded: boolean;
  ribbonOnProfiles: string;
  activeProfiles: string;
}

export const defaultAccountState: AccountStateStorable = {
  logon: null,
  userIdentity: null,
  authenticated: false,
  profilesLoaded: false,
  ribbonOnProfiles: '',
  activeProfiles: ''
};

export const useAccountStore = defineStore('main', {
  state: (): AccountStateStorable => ({ ...defaultAccountState }),
  getters: {
    account: state => state.userIdentity
  },
  actions: {
    authenticate(promise) {
      this.logon = promise;
    },
    setAuthentication(identity) {
      this.userIdentity = identity;
      this.authenticated = true;
      this.logon = null;
    },
    logout() {
      this.userIdentity = null;
      this.authenticated = false;
      this.logon = null;
    },
    setProfilesLoaded() {
      this.profilesLoaded = true;
    },
    setActiveProfiles(profile) {
      this.activeProfiles = profile;
    },
    setRibbonOnProfiles(ribbon) {
      this.ribbonOnProfiles = ribbon;
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/security/authority.ts
export enum Authority {
  ADMIN = 'ROLE_ADMIN',
  USER = 'ROLE_USER',
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/alert/alert.service.ts
import type { BvToast } from 'bootstrap-vue';
import { getCurrentInstance } from 'vue';
import { Composer, useI18n } from 'vue-i18n';

export const useAlertService = () => {
  const bvToast = getCurrentInstance().root.proxy['_bv__toast'];
  if (!bvToast) {
    throw new Error('BootstrapVue toast component was not found');
  }
  const i18n = useI18n();
  return new AlertService({
    bvToast,
    i18n
  });
};

export default class AlertService {
  private bvToast: BvToast;
  private i18n: Composer;

  constructor({ bvToast, i18n }: { bvToast: BvToast; i18n: Composer }) {
    this.bvToast = bvToast;
    this.i18n = i18n;
  }

  public showInfo(toastMessage: string, toastOptions?: any) {
    this.bvToast.toast(toastMessage, {
      toaster: 'b-toaster-top-center',
      title: 'Info',
      variant: 'info',
      solid: true,
      autoHideDelay: 5000,
      ...toastOptions
    });
  }

  public showSuccess(toastMessage: string) {
    this.bvToast.toast(toastMessage, {
      toaster: 'b-toaster-top-center',
      title: 'Success',
      variant: 'success',
      solid: true,
      autoHideDelay: 5000
    });
  }

  public showError(toastMessage: string) {
    this.bvToast.toast(toastMessage, {
      toaster: 'b-toaster-top-center',
      title: 'Error',
      variant: 'danger',
      solid: true,
      autoHideDelay: 5000
    });
  }

  public showHttpError(httpErrorResponse: any) {
    let errorMessage: string | null = null;
    switch (httpErrorResponse.status) {
      case 0:
        errorMessage = this.i18n.t('error.server.not.reachable').toString();
        break;

      case 400: {
        const arr = Object.keys(httpErrorResponse.headers);
        let entityKey: string | null = null;
        for (const entry of arr) {
          if (entry.toLowerCase().endsWith('app-error')) {
            errorMessage = httpErrorResponse.headers[entry];
          } else if (entry.toLowerCase().endsWith('app-params')) {
            entityKey = httpErrorResponse.headers[entry];
          }
        }
        if (errorMessage && entityKey) {
          errorMessage = this.i18n.t(errorMessage, { entityName: this.i18n.t(`global.menu.entities.${entityKey}`) }).toString();
        } else if (!errorMessage) {
          errorMessage = this.i18n.t(httpErrorResponse.data.message).toString();
        }
        break;
      }

      case 404:
        errorMessage = this.i18n.t('error.http.404').toString();
        break;

      default:
        errorMessage = this.i18n.t(httpErrorResponse.data.message).toString();
    }
    this.showError(errorMessage);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/user.model.ts
export interface IUser {
  id?: any;
  login?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  activated?: boolean;
  langKey?: string;
  authorities?: any[];
  createdBy?: string;
  createdDate?: Date;
  lastModifiedBy?: string;
  lastModifiedDate?: Date;
  password?: string;
}

export class User implements IUser {
  constructor(
    public id?: any,
    public login?: string,
    public firstName?: string,
    public lastName?: string,
    public email?: string,
    public activated?: boolean,
    public langKey?: string,
    public authorities?: any[],
    public createdBy?: string,
    public createdDate?: Date,
    public lastModifiedBy?: string,
    public lastModifiedDate?: Date,
    public password?: string
  ) {
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/question.model.ts
export interface IQuestion {
  questionId?: string;
  questionText?: string;
  answerOptions?: string[] | null;
  image?: string | null;
}

export class Question implements IQuestion {
  constructor(
    public questionId?: string,
    public questionText?: string,
    public answerOptions?: string[] | null,
    public image?: string | null
  ) {
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/user-answer.model.ts
import { ITestEntity } from '@/shared/model/test-entity.model';

import { QuestionId } from '@/shared/model/enumerations/question-id.model';

export interface IUserAnswer {
  id?: number;
  answerText?: string | null;
  createdAt?: Date;
  updatedAt?: Date | null;
  questionId?: keyof typeof QuestionId;
  testEntity?: ITestEntity;
}

export class UserAnswer implements IUserAnswer {
  constructor(
    public id?: number,
    public answerText?: string | null,
    public createdAt?: Date,
    public updatedAt?: Date | null,
    public questionId?: keyof typeof QuestionId,
    public testEntity?: ITestEntity
  ) {
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/test-entity.model.ts
import { IUser } from '@/shared/model/user.model';

export interface ITestEntity {
  id?: number;
  createdAt?: Date;
  updatedAt?: Date | null;
  score?: number | null;
  user?: IUser;
}

export class TestEntity implements ITestEntity {
  constructor(
    public id?: number,
    public createdAt?: Date,
    public updatedAt?: Date | null,
    public score?: number | null,
    public user?: IUser
  ) {
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/answer.model.ts
import { v4 as uuidv4 } from 'uuid';
import { QuestionId } from '@/shared/model/enumerations/question-id.model';

export interface IAnswer {
  answerText?: string;
  questionId?: QuestionId;
  idempotencyKey?: string;
}

export class Answer implements IAnswer {
  public idempotencyKey: string;

  constructor(public answerText?: string, public questionId?: QuestionId) {
    this.answerText = answerText;
    this.questionId = questionId;
    this.idempotencyKey = uuidv4();
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/enumerations/question-type.model.ts
export enum QuestionType {
  MULTIPLE_CHOICE = 'MULTIPLE_CHOICE',
  TEXT_INPUT = 'TEXT_INPUT',
  VOICE_INPUT = 'VOICE_INPUT',
  MULTIPLE_TEXT_INPUT = 'MULTIPLE_TEXT_INPUT',
  NUMERIC_INPUT = 'NUMERIC_INPUT',
  SUBTRACTION_TASK = 'SUBTRACTION_TASK',
  DRAG_AND_DROP = 'DRAG_AND_DROP',
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/model/enumerations/question-id.model.ts
export enum QuestionId {
  FIRST = 'FIRST',
  QUESTION_1 = 'QUESTION_1',
  QUESTION_2 = 'QUESTION_2',
  QUESTION_3 = 'QUESTION_3',
  QUESTION_4 = 'QUESTION_4',
  QUESTION_5 = 'QUESTION_5',
  QUESTION_6 = 'QUESTION_6',
  QUESTION_7 = 'QUESTION_7',
  QUESTION_8 = 'QUESTION_8',
  QUESTION_9 = 'QUESTION_9',
  QUESTION_10 = 'QUESTION_10',
  QUESTION_11 = 'QUESTION_11',
  QUESTION_12 = 'QUESTION_12',
  QUESTION_13 = 'QUESTION_13',
  QUESTION_14 = 'QUESTION_14',
  QUESTION_15 = 'QUESTION_15',
  QUESTION_16 = 'QUESTION_16',
  QUESTION_17 = 'QUESTION_17',
  QUESTION_18 = 'QUESTION_18',
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/shared/data/data-utils.service.ts
/**
 * An composable utility for data.
 */
const useDataUtils = () => ({
  /**
   * Method to abbreviate the text given
   */
  abbreviate(text, append = '...') {
    if (text.length < 30) {
      return text;
    }
    return text ? text.substring(0, 15) + append + text.slice(-10) : '';
  },

  /**
   * Method to find the byte size of the string provides
   */
  byteSize(base64String) {
    return this.formatAsBytes(this.size(base64String));
  },

  /**
   * Method to open file
   */
  openFile(contentType, data) {
    const byteCharacters = atob(data);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], {
      type: contentType
    });
    const objectURL = URL.createObjectURL(blob);
    const win = window.open(objectURL);
    if (win) {
      win.onload = () => URL.revokeObjectURL(objectURL);
    }
  },

  /**
   * Method to convert the file to base64
   */
  toBase64(file, cb) {
    const fileReader = new FileReader();
    fileReader.readAsDataURL(file);
    fileReader.onload = (e: any) => {
      const base64Data = e.target.result.substring(e.target.result.indexOf('base64,') + 'base64,'.length);
      cb(base64Data);
    };
  },

  /**
   * Method to clear the input
   */
  clearInputImage(entity, elementRef, field, fieldContentType, idInput) {
    if (entity && field && fieldContentType) {
      if (Object.prototype.hasOwnProperty.call(entity, field)) {
        entity[field] = null;
      }
      if (Object.prototype.hasOwnProperty.call(entity, fieldContentType)) {
        entity[fieldContentType] = null;
      }
      if (elementRef && idInput && elementRef.nativeElement.querySelector('#' + idInput)) {
        elementRef.nativeElement.querySelector('#' + idInput).value = null;
      }
    }
  },

  endsWith(suffix, str) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  },

  paddingSize(value) {
    if (this.endsWith('==', value)) {
      return 2;
    }
    if (this.endsWith('=', value)) {
      return 1;
    }
    return 0;
  },

  size(value) {
    return (value.length / 4) * 3 - this.paddingSize(value);
  },

  formatAsBytes(size) {
    return size.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ' ') + ' bytes';
  },

  setFileData(event, entity, field, isImage) {
    if (event && event.target.files && event.target.files[0]) {
      const file = event.target.files[0];
      if (isImage && !/^image\//.test(file.type)) {
        return;
      }
      this.toBase64(file, base64Data => {
        entity[field] = base64Data;
        entity[`${field}ContentType`] = file.type;
      });
    }
  },

  /**
   * Method to download file
   */
  downloadFile(contentType, data, fileName) {
    const byteCharacters = atob(data);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const blob = new Blob([byteArray], {
      type: contentType
    });
    const tempLink = document.createElement('a');
    tempLink.href = window.URL.createObjectURL(blob);
    tempLink.download = fileName;
    tempLink.target = '_blank';
    tempLink.click();
  },

  /**
   * Method to parse header links
   */
  parseLinks(header) {
    const links = {};

    if ((header?.indexOf(',') ?? -1) === -1) {
      return links;
    }
    // Split parts by comma
    const parts = header.split(',');

    // Parse each part into a named link
    parts.forEach(p => {
      if (p.indexOf('>;') === -1) {
        return;
      }
      const section = p.split('>;');
      const url = section[0].replace(/<(.*)/, '$1').trim();
      const queryString = { page: null };
      url.replace(new RegExp(/([^?=&]+)(=([^&]*))?/g), ($0, $1, $2, $3) => {
        queryString[$1] = $3;
      });
      let page = queryString.page;
      if (typeof page === 'string') {
        page = parseInt(page, 10);
      }
      const name = section[1].replace(/rel="(.*)"/, '$1').trim();
      links[name] = page;
    });
    return links;
  },
});

export default useDataUtils;


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/login.service.ts
interface Emitter {
  emit: (event: string, ...args: any[]) => void;
}

export default class LoginService {
  private readonly emit: Emitter['emit'];

  constructor({ emit }: Emitter) {
    this.emit = emit;
  }

  public openLogin(): void {
    this.emit('bv::show::modal', 'login-page');
  }

  public hideLogin(): void {
    this.emit('bv::hide::modal', 'login-page');
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/account.service.ts
import axios from 'axios';

import { AccountStore } from '@/store';

export default class AccountService {
  constructor(private store: AccountStore) {
  }

  public async update(): Promise<void> {
    if (!this.store.profilesLoaded) {
      await this.retrieveProfiles();
      this.store.setProfilesLoaded();
    }
    await this.loadAccount();
  }

  public async retrieveProfiles(): Promise<boolean> {
    try {
      const res = await axios.get<any>('management/info');
      if (res.data && res.data.activeProfiles) {
        this.store.setRibbonOnProfiles(res.data['display-ribbon-on-profiles']);
        this.store.setActiveProfiles(res.data['activeProfiles']);
      }
      return true;
    } catch (error) {
      return false;
    }
  }

  public async retrieveAccount(): Promise<boolean> {
    try {
      const response = await axios.get<any>('api/account');
      if (response.status === 200 && response.data) {
        const account = response.data;
        this.store.setAuthentication(account);
        return true;
      }
    } catch (error) {
    }

    this.store.logout();
    return false;
  }

  public async loadAccount() {
    if (this.store.logon) {
      return this.store.logon;
    }
    const token = localStorage.getItem('mmse-authenticationToken') || sessionStorage.getItem('mmse-authenticationToken');
    if (this.authenticated && this.userAuthorities && token) {
      return;
    }

    const promise = this.retrieveAccount();
    this.store.authenticate(promise);
    promise.then(() => this.store.authenticate(null));
    await promise;
  }

  public async hasAnyAuthorityAndCheckAuth(authorities: any): Promise<boolean> {
    if (typeof authorities === 'string') {
      authorities = [authorities];
    }

    return this.checkAuthorities(authorities);
  }

  public get authenticated(): boolean {
    return this.store.authenticated;
  }

  public get userAuthorities(): string[] {
    return this.store.account?.authorities;
  }

  private checkAuthorities(authorities: string[]): boolean {
    if (this.userAuthorities) {
      for (const authority of authorities) {
        if (this.userAuthorities.includes(authority)) {
          return true;
        }
      }
    }
    return false;
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/settings/settings.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8 toastify-container">
        <h2 v-if="username" id="settings-title">
          <span v-html="t$('settings.title', { username: username })"></span>
        </h2>

        <div class="alert alert-success" role="alert" v-if="success" v-html="t$('settings.messages.success')"></div>

        <div class="alert alert-danger" role="alert" v-if="errorEmailExists"
             v-html="t$('register.messages.error.emailexists')"></div>

        <form name="form" id="settings-form" role="form" v-on:submit.prevent="save()" v-if="settingsAccount" novalidate>
          <div class="form-group">
            <label class="form-control-label" for="firstName" v-text="t$('settings.form.firstname')"></label>
            <input
              type="text"
              class="form-control"
              id="firstName"
              name="firstName"
              v-bind:placeholder="t$('settings.form[\'firstname.placeholder\']')"
              :class="{ valid: !v$.settingsAccount.firstName.$invalid, invalid: v$.settingsAccount.firstName.$invalid }"
              v-model="v$.settingsAccount.firstName.$model"
              minlength="1"
              maxlength="50"
              required
              data-cy="firstname"
            />
            <div v-if="v$.settingsAccount.firstName.$anyDirty && v$.settingsAccount.firstName.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.firstName.required"
                v-text="t$('settings.messages.validate.firstname.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.firstName.minLength"
                v-text="t$('settings.messages.validate.firstname.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.firstName.maxLength"
                v-text="t$('settings.messages.validate.firstname.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="lastName" v-text="t$('settings.form.lastname')"></label>
            <input
              type="text"
              class="form-control"
              id="lastName"
              name="lastName"
              v-bind:placeholder="t$('settings.form[\'lastname.placeholder\']')"
              :class="{ valid: !v$.settingsAccount.lastName.$invalid, invalid: v$.settingsAccount.lastName.$invalid }"
              v-model="v$.settingsAccount.lastName.$model"
              minlength="1"
              maxlength="50"
              required
              data-cy="lastname"
            />
            <div v-if="v$.settingsAccount.lastName.$anyDirty && v$.settingsAccount.lastName.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.lastName.required"
                v-text="t$('settings.messages.validate.lastname.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.lastName.minLength"
                v-text="t$('settings.messages.validate.lastname.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.lastName.maxLength"
                v-text="t$('settings.messages.validate.lastname.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="email" v-text="t$('global.form[\'email.label\']')"></label>
            <input
              type="email"
              class="form-control"
              id="email"
              name="email"
              v-bind:placeholder="t$('global.form[\'email.placeholder\']')"
              :class="{ valid: !v$.settingsAccount.email.$invalid, invalid: v$.settingsAccount.email.$invalid }"
              v-model="v$.settingsAccount.email.$model"
              minlength="5"
              maxlength="254"
              email
              required
              data-cy="email"
            />
            <div v-if="v$.settingsAccount.email.$anyDirty && v$.settingsAccount.email.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.email.required"
                v-text="t$('global.messages.validate.email.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.email.email"
                v-text="t$('global.messages.validate.email.invalid')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.email.minLength"
                v-text="t$('global.messages.validate.email.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.settingsAccount.email.maxLength"
                v-text="t$('global.messages.validate.email.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group" v-if="languages && Object.keys(languages).length > 1">
            <label for="langKey" v-text="t$('settings.form.language')"></label>
            <select class="form-control" id="langKey" name="langKey" v-model="settingsAccount.langKey"
                    data-cy="langKey">
              <option v-for="(language, key) in languages" :value="key" :key="`lang-${key}`">{{ language.name }}
              </option>
            </select>
          </div>
          <button
            type="submit"
            :disabled="v$.settingsAccount.$invalid"
            class="btn btn-primary"
            v-text="t$('settings.form.button')"
            data-cy="submit"
          ></button>
        </form>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./settings.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/settings/settings.component.ts
import { computed, ComputedRef, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import languages from '@/shared/config/languages';
import { useVuelidate } from '@vuelidate/core';
import { email, maxLength, minLength, required } from '@vuelidate/validators';
import axios from 'axios';
import { EMAIL_ALREADY_USED_TYPE } from '@/constants';
import { useStore } from '@/store';

const validations = {
  settingsAccount: {
    firstName: {
      required,
      minLength: minLength(1),
      maxLength: maxLength(50)
    },
    lastName: {
      required,
      minLength: minLength(1),
      maxLength: maxLength(50)
    },
    email: {
      required,
      email,
      minLength: minLength(5),
      maxLength: maxLength(254)
    },
  },
};

async function saveAccount(settingsAccount: any) {
  try {
    await axios.post('api/account', settingsAccount);
    return { success: 'OK' };
  } catch (ex) {
    if (ex.response.status === 400 && ex.response.data.type === EMAIL_ALREADY_USED_TYPE) {
      return { errorEmailExists: 'ERROR' };
    }
    return { error: 'ERROR' };
  }
}

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'Settings',
  validations,
  setup() {
    const store = useStore();

    const success: Ref<string> = ref(null);
    const error: Ref<string> = ref(null);
    const errorEmailExists: Ref<string> = ref(null);

    const settingsAccount = computed(() => store.account);
    const username = inject<ComputedRef<string>>('currentUsername', () => computed(() => store.account?.login), true);

    return {
      success,
      error,
      errorEmailExists,
      settingsAccount,
      username,
      v$: useVuelidate(),
      languages: languages(),
      t$: useI18n().t
    };
  },
  methods: {
    async save() {
      const result = await saveAccount(this.settingsAccount);
      this.success = result.success || null;
      this.error = result.error || null;
      this.errorEmailExists = result.errorEmailExists || null;
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/login-form/login-form.component.ts
import axios from 'axios';
import { defineComponent, inject, ref, Ref } from 'vue';
import { useRoute, useRouter } from 'vue-router';
import { useI18n } from 'vue-i18n';
import AccountService from '../account.service';
import LoginService from '@/account/login.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  setup() {
    const authenticationError: Ref<boolean> = ref(false);
    const login: Ref<string> = ref(null);
    const password: Ref<string> = ref(null);
    const rememberMe: Ref<boolean> = ref(false);
    const route = useRoute();
    const router = useRouter();

    const previousState = () => router.go(-1);

    const accountService = inject<AccountService>('accountService');
    const loginService = inject<LoginService>('loginService');

    const doLogin = async () => {
      const data = { username: login.value, password: password.value, rememberMe: rememberMe.value };
      try {
        const result = await axios.post('api/authenticate', data);
        const bearerToken = result.headers.authorization;
        if (bearerToken && bearerToken.slice(0, 7) === 'Bearer ') {
          const jwt = bearerToken.slice(7, bearerToken.length);
          if (rememberMe.value) {
            localStorage.setItem('mmse-authenticationToken', jwt);
            sessionStorage.removeItem('mmse-authenticationToken');
          } else {
            sessionStorage.setItem('mmse-authenticationToken', jwt);
            localStorage.removeItem('mmse-authenticationToken');
          }
        }

        authenticationError.value = false;
        loginService.hideLogin();
        await accountService.retrieveAccount();
        if (route.path === '/forbidden') {
          previousState();
        }
      } catch (_error) {
        authenticationError.value = true;
      }
    };
    return {
      authenticationError,
      login,
      password,
      rememberMe,
      accountService,
      doLogin,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/login-form/login-form.vue
<template>
  <div class="modal-body">
    <div class="row justify-content-center">
      <div class="col-md-8">
        <b-alert
          show
          data-cy="loginError"
          variant="danger"
          v-if="authenticationError"
          v-html="t$('login.messages.error.authentication')"
        ></b-alert>
      </div>
      <div class="col-md-8">
        <b-form role="form" v-on:submit.prevent="doLogin()">
          <b-form-group v-bind:label="t$('global.form[\'username.label\']')" label-for="username">
            <b-form-input
              id="username"
              type="text"
              name="username"
              autofocus
              v-bind:placeholder="t$('global.form[\'username.placeholder\']')"
              v-model="login"
              data-cy="username"
            >
            </b-form-input>
          </b-form-group>
          <b-form-group v-bind:label="t$('login.form.password')" label-for="password">
            <b-form-input
              id="password"
              type="password"
              name="password"
              v-bind:placeholder="t$('login.form[\'password.placeholder\']')"
              v-model="password"
              data-cy="password"
            >
            </b-form-input>
          </b-form-group>
          <b-form-checkbox id="rememberMe" name="rememberMe" v-model="rememberMe" checked>
            <span v-text="t$('login.form.rememberme')"></span>
          </b-form-checkbox>
          <div>
            <b-button data-cy="submit" type="submit" variant="primary" v-text="t$('login.form.button')"></b-button>
          </div>
        </b-form>
        <p></p>
        <div>
          <b-alert show variant="warning">
            <b-link
              :to="'/account/reset/request'"
              class="alert-link"
              v-text="t$('login.password.forgot')"
              data-cy="forgetYourPasswordSelector"
            ></b-link>
          </b-alert>
        </div>
        <div>
          <b-alert show variant="warning">
            <span v-text="t$('global.messages.info.register.noaccount')"></span>
            <b-link :to="'/register'" class="alert-link" v-text="t$('global.messages.info.register.link')"></b-link>
          </b-alert>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./login-form.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/register/register.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useVuelidate } from '@vuelidate/core';
import { email, helpers, maxLength, minLength, required, sameAs } from '@vuelidate/validators';
import LoginService from '@/account/login.service';
import RegisterService from '@/account/register/register.service';
import { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from '@/constants';

const loginPattern = helpers.regex(/^[a-zA-Z0-9!$&*+=?^_`{|}~.-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$|^[_.@A-Za-z0-9-]+$/);

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'Register',
  validations() {
    return {
      registerAccount: {
        login: {
          required,
          minLength: minLength(1),
          maxLength: maxLength(50),
          pattern: loginPattern
        },
        email: {
          required,
          minLength: minLength(5),
          maxLength: maxLength(254),
          email
        },
        password: {
          required,
          minLength: minLength(4),
          maxLength: maxLength(254)
        },
      },
      confirmPassword: {
        required,
        minLength: minLength(4),
        maxLength: maxLength(50),
        sameAsPassword: sameAs(this.registerAccount.password)
      },
    };
  },
  setup(prop) {
    const loginService = inject<LoginService>('loginService');
    const registerService = inject('registerService', () => new RegisterService(), true);
    const currentLanguage = inject('currentLanguage', () => computed(() => navigator.language ?? 'en'), true);

    const error: Ref<string> = ref('');
    const errorEmailExists: Ref<string> = ref('');
    const errorUserExists: Ref<string> = ref('');
    const success: Ref<boolean> = ref(false);

    const confirmPassword: Ref<any> = ref(null);
    const registerAccount: Ref<any> = ref({
      login: undefined,
      email: undefined,
      password: undefined
    });

    const openLogin = () => {
      loginService.openLogin();
    };

    return {
      openLogin,
      currentLanguage,
      registerService,
      error,
      errorEmailExists,
      errorUserExists,
      success,
      confirmPassword,
      registerAccount,
      v$: useVuelidate(),
      t$: useI18n().t
    };
  },
  methods: {
    register(): void {
      this.error = null;
      this.errorUserExists = null;
      this.errorEmailExists = null;
      this.registerAccount.langKey = this.currentLanguage;
      this.registerService
        .processRegistration(this.registerAccount)
        .then(() => {
          this.success = true;
        })
        .catch(error => {
          this.success = null;
          if (error.response.status === 400 && error.response.data.type === LOGIN_ALREADY_USED_TYPE) {
            this.errorUserExists = 'ERROR';
          } else if (error.response.status === 400 && error.response.data.type === EMAIL_ALREADY_USED_TYPE) {
            this.errorEmailExists = 'ERROR';
          } else {
            this.error = 'ERROR';
          }
        });
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/register/register.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8 toastify-container">
        <h1 v-text="t$('register.title')" id="register-title" data-cy="registerTitle"></h1>

        <div class="alert alert-success" role="alert" v-if="success" v-html="t$('register.messages.success')"></div>

        <div class="alert alert-danger" role="alert" v-if="error" v-html="t$('register.messages.error.fail')"></div>

        <div class="alert alert-danger" role="alert" v-if="errorUserExists"
             v-html="t$('register.messages.error.userexists')"></div>

        <div class="alert alert-danger" role="alert" v-if="errorEmailExists"
             v-html="t$('register.messages.error.emailexists')"></div>
      </div>
    </div>
    <div class="row justify-content-center">
      <div class="col-md-8">
        <form id="register-form" name="registerForm" role="form" v-on:submit.prevent="register()" v-if="!success"
              no-validate>
          <div class="form-group">
            <label class="form-control-label" for="username" v-text="t$('global.form[\'username.label\']')"></label>
            <input
              type="text"
              class="form-control"
              v-model="v$.registerAccount.login.$model"
              id="username"
              name="login"
              :class="{ valid: !v$.registerAccount.login.$invalid, invalid: v$.registerAccount.login.$invalid }"
              required
              minlength="1"
              maxlength="50"
              pattern="^[a-zA-Z0-9!#$&'*+=?^_`{|}~.-]+@?[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$"
              v-bind:placeholder="t$('global.form[\'username.placeholder\']')"
              data-cy="username"
            />
            <div v-if="v$.registerAccount.login.$anyDirty && v$.registerAccount.login.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.login.required"
                v-text="t$('register.messages.validate.login.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.login.minLength"
                v-text="t$('register.messages.validate.login.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.login.maxLength"
                v-text="t$('register.messages.validate.login.maxlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.login.pattern"
                v-text="t$('register.messages.validate.login.pattern')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="email" v-text="t$('global.form[\'email.label\']')"></label>
            <input
              type="email"
              class="form-control"
              id="email"
              name="email"
              :class="{ valid: !v$.registerAccount.email.$invalid, invalid: v$.registerAccount.email.$invalid }"
              v-model="v$.registerAccount.email.$model"
              minlength="5"
              maxlength="254"
              email
              required
              v-bind:placeholder="t$('global.form[\'email.placeholder\']')"
              data-cy="email"
            />
            <div v-if="v$.registerAccount.email.$anyDirty && v$.registerAccount.email.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.email.required"
                v-text="t$('global.messages.validate.email.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.email.email"
                v-text="t$('global.messages.validate.email.invalid')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.email.minLength"
                v-text="t$('global.messages.validate.email.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.email.maxLength"
                v-text="t$('global.messages.validate.email.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="firstPassword"
                   v-text="t$('global.form[\'newpassword.label\']')"></label>
            <input
              type="password"
              class="form-control"
              id="firstPassword"
              name="password"
              :class="{ valid: !v$.registerAccount.password.$invalid, invalid: v$.registerAccount.password.$invalid }"
              v-model="v$.registerAccount.password.$model"
              minlength="4"
              maxlength="50"
              required
              v-bind:placeholder="t$('global.form[\'newpassword.placeholder\']')"
              data-cy="firstPassword"
            />
            <div v-if="v$.registerAccount.password.$anyDirty && v$.registerAccount.password.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.password.required"
                v-text="t$('global.messages.validate.newpassword.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.password.minLength"
                v-text="t$('global.messages.validate.newpassword.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.registerAccount.password.maxLength"
                v-text="t$('global.messages.validate.newpassword.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="secondPassword"
                   v-text="t$('global.form[\'confirmpassword.label\']')"></label>
            <input
              type="password"
              class="form-control"
              id="secondPassword"
              name="confirmPasswordInput"
              :class="{ valid: !v$.confirmPassword.$invalid, invalid: v$.confirmPassword.$invalid }"
              v-model="v$.confirmPassword.$model"
              minlength="4"
              maxlength="50"
              required
              v-bind:placeholder="t$('global.form[\'confirmpassword.placeholder\']')"
              data-cy="secondPassword"
            />
            <div v-if="v$.confirmPassword.$dirty && v$.confirmPassword.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.confirmPassword.required"
                v-text="t$('global.messages.validate.confirmpassword.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.confirmPassword.minLength"
                v-text="t$('global.messages.validate.confirmpassword.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.confirmPassword.maxLength"
                v-text="t$('global.messages.validate.confirmpassword.maxlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.confirmPassword.sameAsPassword"
                v-text="t$('global.messages.error.dontmatch')"
              ></small>
            </div>
          </div>

          <button
            type="submit"
            :disabled="v$.$invalid"
            class="btn btn-primary"
            v-text="t$('register.form.button')"
            data-cy="submit"
          ></button>
        </form>
        <p></p>
        <div class="alert alert-warning">
          <span v-text="t$('global.messages.info.authenticated.prefix')"></span>
          <a class="alert-link" v-on:click="openLogin()" v-text="t$('global.messages.info.authenticated.link')"></a
          ><span v-html="t$('global.messages.info.authenticated.suffix')"></span>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./register.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/register/register.service.ts
import axios from 'axios';

export default class RegisterService {
  public processRegistration(account: any): Promise<any> {
    return axios.post('api/register', account);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/reset-password/init/reset-password-init.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h1 v-text="t$('reset.request.title')"></h1>

        <div class="alert alert-warning" v-if="!success">
          <p v-text="t$('reset.request.messages.info')"></p>
        </div>

        <div class="alert alert-success" v-if="success">
          <p v-text="t$('reset.request.messages.success')"></p>
        </div>

        <form v-if="!success" name="form" role="form" v-on:submit.prevent="requestReset()">
          <div class="form-group">
            <label class="form-control-label" for="email" v-text="t$('global.form[\'email.label\']')"></label>
            <input
              type="email"
              class="form-control"
              id="email"
              name="email"
              v-bind:placeholder="t$('global.form[\'email.placeholder\']')"
              :class="{ valid: !v$.resetAccount.email.$invalid, invalid: v$.resetAccount.email.$invalid }"
              v-model="v$.resetAccount.email.$model"
              minlength="5"
              maxlength="254"
              email
              required
              data-cy="emailResetPassword"
            />
            <div v-if="v$.resetAccount.email.$anyDirty && v$.resetAccount.email.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.resetAccount.email.required"
                v-text="t$('global.messages.validate.email.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.resetAccount.email.email"
                v-text="t$('global.messages.validate.email.invalid')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.resetAccount.email.minLength"
                v-text="t$('global.messages.validate.email.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.resetAccount.email.maxLength"
                v-text="t$('global.messages.validate.email.maxlength')"
              ></small>
            </div>
          </div>
          <button
            type="submit"
            :disabled="v$.resetAccount.$invalid"
            class="btn btn-primary"
            v-text="t$('reset.request.form.button')"
            data-cy="submit"
          ></button>
        </form>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./reset-password-init.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/reset-password/init/reset-password-init.component.ts
import { defineComponent, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useVuelidate } from '@vuelidate/core';
import { email, maxLength, minLength, required } from '@vuelidate/validators';
import axios from 'axios';

const validations = {
  resetAccount: {
    email: {
      required,
      minLength: minLength(5),
      maxLength: maxLength(254),
      email
    },
  },
};

interface ResetAccount {
  email: string | null;
}

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'ResetPasswordInit',
  validations,
  setup(prop) {
    const error: Ref<string> = ref(null);
    const success: Ref<boolean> = ref(false);
    const resetAccount: Ref<ResetAccount> = ref({
      email: null
    });

    return {
      error,
      success,
      resetAccount,
      v$: useVuelidate(),
      t$: useI18n().t
    };
  },
  methods: {
    async requestReset(): Promise<void> {
      this.error = null;
      this.success = false;
      await axios
        .post('api/account/reset-password/init', this.resetAccount.email, {
          headers: {
            'content-type': 'text/plain'
          },
        })
        .then(() => {
          this.success = true;
        })
        .catch(() => {
          this.success = false;
          this.error = 'ERROR';
        });
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/reset-password/finish/reset-password-finish.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import axios from 'axios';
import { useVuelidate } from '@vuelidate/core';
import { maxLength, minLength, required, sameAs } from '@vuelidate/validators';
import LoginService from '@/account/login.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'ResetPasswordFinish',
  validations() {
    return {
      resetAccount: {
        newPassword: {
          required,
          minLength: minLength(4),
          maxLength: maxLength(254)
        },
        confirmPassword: {
          sameAsPassword: sameAs(this.resetAccount.newPassword)
        },
      },
    };
  },
  created(): void {
    if (this.$route?.query?.key !== undefined) {
      this.key = this.$route.query.key;
    }
    this.keyMissing = !this.key;
  },
  setup(prop) {
    const loginService = inject<LoginService>('loginService');

    const doNotMatch: Ref<string> = ref(null);
    const success: Ref<string> = ref(null);
    const error: Ref<string> = ref(null);
    const keyMissing: Ref<boolean> = ref(false);
    const key: Ref<any> = ref(null);
    const resetAccount: Ref<any> = ref({
      newPassword: null,
      confirmPassword: null
    });

    const openLogin = () => {
      loginService.openLogin();
    };

    return {
      openLogin,
      doNotMatch,
      success,
      error,
      keyMissing,
      key,
      resetAccount,
      v$: useVuelidate(),
      t$: useI18n().t
    };
  },
  methods: {
    finishReset() {
      this.doNotMatch = null;
      this.success = null;
      this.error = null;
      if (this.resetAccount.newPassword !== this.resetAccount.confirmPassword) {
        this.doNotMatch = 'ERROR';
      } else {
        return axios
          .post('api/account/reset-password/finish', { key: this.key, newPassword: this.resetAccount.newPassword })
          .then(() => {
            this.success = 'OK';
          })
          .catch(() => {
            this.success = null;
            this.error = 'ERROR';
          });
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/reset-password/finish/reset-password-finish.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h1 v-text="t$('reset.request.title')"></h1>

        <div class="alert alert-danger" v-html="t$('reset.finish.messages.keymissing')" v-if="keyMissing"></div>

        <div class="alert alert-danger" v-if="error">
          <p v-text="t$('reset.finish.messages.error')"></p>
        </div>

        <div class="alert alert-success" v-if="success">
          <span v-html="t$('reset.finish.messages.success')"></span>
          <a class="alert-link" v-on:click="openLogin" v-text="t$('global.messages.info.authenticated.link')"></a>
        </div>
        <div class="alert alert-danger" v-if="doNotMatch">
          <p v-text="t$('global.messages.error.dontmatch')"></p>
        </div>

        <div class="alert alert-warning" v-if="!success && !keyMissing">
          <p v-text="t$('reset.finish.messages.info')"></p>
        </div>

        <div v-if="!keyMissing">
          <form v-if="!success" name="form" role="form" v-on:submit.prevent="finishReset()">
            <div class="form-group">
              <label class="form-control-label" for="newPassword"
                     v-text="t$('global.form[\'newpassword.label\']')"></label>
              <input
                type="password"
                class="form-control"
                id="newPassword"
                name="newPassword"
                v-bind:placeholder="t$('global.form[\'newpassword.placeholder\']')"
                :class="{ valid: !v$.resetAccount.newPassword.$invalid, invalid: v$.resetAccount.newPassword.$invalid }"
                v-model="v$.resetAccount.newPassword.$model"
                minlength="4"
                maxlength="50"
                required
                data-cy="resetPassword"
              />
              <div v-if="v$.resetAccount.newPassword.$anyDirty && v$.resetAccount.newPassword.$invalid">
                <small
                  class="form-text text-danger"
                  v-if="!v$.resetAccount.newPassword.required"
                  v-text="t$('global.messages.validate.newpassword.required')"
                ></small>
                <small
                  class="form-text text-danger"
                  v-if="!v$.resetAccount.newPassword.minLength"
                  v-text="t$('global.messages.validate.newpassword.minlength')"
                ></small>
                <small
                  class="form-text text-danger"
                  v-if="!v$.resetAccount.newPassword.maxLength"
                  v-text="t$('global.messages.validate.newpassword.maxlength')"
                ></small>
              </div>
            </div>
            <div class="form-group">
              <label class="form-control-label" for="confirmPassword"
                     v-text="t$('global.form[\'confirmpassword.label\']')"></label>
              <input
                type="password"
                class="form-control"
                id="confirmPassword"
                name="confirmPassword"
                :class="{ valid: !v$.resetAccount.confirmPassword.$invalid, invalid: v$.resetAccount.confirmPassword.$invalid }"
                v-bind:placeholder="t$('global.form[\'confirmpassword.placeholder\']')"
                v-model="v$.resetAccount.confirmPassword.$model"
                minlength="4"
                maxlength="50"
                required
                data-cy="confirmResetPassword"
              />
              <div v-if="v$.resetAccount.confirmPassword.$anyDirty && v$.resetAccount.confirmPassword.$invalid">
                <small
                  class="form-text text-danger"
                  v-if="!v$.resetAccount.confirmPassword.sameAsPassword"
                  v-text="t$('global.messages.error.dontmatch')"
                ></small>
              </div>
            </div>
            <button
              type="submit"
              :disabled="v$.resetAccount.$invalid"
              class="btn btn-primary"
              v-text="t$('password.form.button')"
              data-cy="submit"
            ></button>
          </form>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./reset-password-finish.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/activate/activate.service.ts
import axios, { AxiosInstance } from 'axios';

export default class ActivateService {
  private axios: AxiosInstance;

  constructor() {
    this.axios = axios;
  }

  public activateAccount(key: string): Promise<any> {
    return this.axios.get(`api/activate?key=${key}`);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/activate/activate.component.ts
import { defineComponent, inject, onMounted, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import LoginService from '@/account/login.service';
import ActivateService from './activate.service';
import { useRoute } from 'vue-router';

export default defineComponent({
  compatConfig: { MODE: 3 },
  setup() {
    const activateService = inject('activateService', () => new ActivateService(), true);
    const loginService = inject<LoginService>('loginService');
    const route = useRoute();

    const success: Ref<boolean> = ref(false);
    const error: Ref<boolean> = ref(false);

    onMounted(async () => {
      const key = Array.isArray(route.query.key) ? route.query.key[0] : route.query.key;
      try {
        await activateService.activateAccount(key);
        success.value = true;
        error.value = false;
      } catch {
        error.value = true;
        success.value = false;
      }
    });

    const openLogin = () => {
      loginService.openLogin();
    };

    return {
      activateService,
      openLogin,
      success,
      error,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/activate/activate.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8">
        <h1 v-text="t$('activate.title')"></h1>
        <div class="alert alert-success" v-if="success">
          <span v-html="t$('activate.messages.success')"></span>
          <a class="alert-link" v-on:click="openLogin" v-text="t$('global.messages.info.authenticated.link')"></a>.
        </div>
        <div class="alert alert-danger" v-if="error" v-html="t$('activate.messages.error')"></div>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./activate.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/change-password/change-password.vue
<template>
  <div>
    <div class="row justify-content-center">
      <div class="col-md-8 toastify-container">
        <h2 v-if="username" id="password-title">
          <span v-html="t$('password.title', { username: username })"></span>
        </h2>

        <div class="alert alert-success" role="alert" v-if="success" v-html="t$('password.messages.success')"></div>
        <div class="alert alert-danger" role="alert" v-if="error" v-html="t$('password.messages.error')"></div>

        <div class="alert alert-danger" role="alert" v-if="doNotMatch"
             v-text="t$('global.messages.error.dontmatch')"></div>

        <form name="form" role="form" id="password-form" v-on:submit.prevent="changePassword()">
          <div class="form-group">
            <label class="form-control-label" for="currentPassword"
                   v-text="t$('global.form[\'currentpassword.label\']')"></label>
            <input
              type="password"
              class="form-control"
              id="currentPassword"
              name="currentPassword"
              :class="{ valid: !v$.resetPassword.currentPassword.$invalid, invalid: v$.resetPassword.currentPassword.$invalid }"
              v-bind:placeholder="t$('global.form[\'currentpassword.placeholder\']')"
              v-model="v$.resetPassword.currentPassword.$model"
              required
              data-cy="currentPassword"
            />
            <div v-if="v$.resetPassword.currentPassword.$anyDirty && v$.resetPassword.currentPassword.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.resetPassword.currentPassword.required"
                v-text="t$('global.messages.validate.newpassword.required')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="newPassword"
                   v-text="t$('global.form[\'newpassword.label\']')"></label>
            <input
              type="password"
              class="form-control"
              id="newPassword"
              name="newPassword"
              v-bind:placeholder="t$('global.form[\'newpassword.placeholder\']')"
              :class="{ valid: !v$.resetPassword.newPassword.$invalid, invalid: v$.resetPassword.newPassword.$invalid }"
              v-model="v$.resetPassword.newPassword.$model"
              minlength="4"
              maxlength="50"
              required
              data-cy="newPassword"
            />
            <div v-if="v$.resetPassword.newPassword.$anyDirty && v$.resetPassword.newPassword.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.resetPassword.newPassword.required"
                v-text="t$('global.messages.validate.newpassword.required')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.resetPassword.newPassword.minLength"
                v-text="t$('global.messages.validate.newpassword.minlength')"
              ></small>
              <small
                class="form-text text-danger"
                v-if="!v$.resetPassword.newPassword.maxLength"
                v-text="t$('global.messages.validate.newpassword.maxlength')"
              ></small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" for="confirmPassword"
                   v-text="t$('global.form[\'confirmpassword.label\']')"></label>
            <input
              type="password"
              class="form-control"
              id="confirmPassword"
              name="confirmPassword"
              :class="{ valid: !v$.resetPassword.confirmPassword.$invalid, invalid: v$.resetPassword.confirmPassword.$invalid }"
              v-bind:placeholder="t$('global.form[\'confirmpassword.placeholder\']')"
              v-model="v$.resetPassword.confirmPassword.$model"
              minlength="4"
              maxlength="50"
              required
              data-cy="confirmPassword"
            />
            <div v-if="v$.resetPassword.confirmPassword.$anyDirty && v$.resetPassword.confirmPassword.$invalid">
              <small
                class="form-text text-danger"
                v-if="!v$.resetPassword.confirmPassword.sameAsPassword"
                v-text="t$('global.messages.error.dontmatch')"
              ></small>
            </div>
          </div>

          <button
            type="submit"
            :disabled="v$.resetPassword.$invalid"
            class="btn btn-primary"
            v-text="t$('password.form.button')"
            data-cy="submit"
          ></button>
        </form>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./change-password.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/account/change-password/change-password.component.ts
import { ComputedRef, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useVuelidate } from '@vuelidate/core';
import { maxLength, minLength, required, sameAs } from '@vuelidate/validators';
import axios from 'axios';

export default defineComponent({
  compatConfig: { MODE: 3 },
  validations() {
    return {
      resetPassword: {
        currentPassword: {
          required
        },
        newPassword: {
          required,
          minLength: minLength(4),
          maxLength: maxLength(254)
        },
        confirmPassword: {
          sameAsPassword: sameAs(this.resetPassword.newPassword)
        },
      },
    };
  },
  setup() {
    const username = inject<ComputedRef<string>>('currentUsername');
    const success: Ref<string> = ref(null);
    const error: Ref<string> = ref(null);
    const doNotMatch: Ref<string> = ref(null);
    const resetPassword: Ref<any> = ref({
      currentPassword: null,
      newPassword: null,
      confirmPassword: null
    });

    return {
      username,
      success,
      error,
      doNotMatch,
      resetPassword,
      v$: useVuelidate(),
      t$: useI18n().t
    };
  },
  methods: {
    changePassword(): void {
      if (this.resetPassword.newPassword !== this.resetPassword.confirmPassword) {
        this.error = null;
        this.success = null;
        this.doNotMatch = 'ERROR';
      } else {
        this.doNotMatch = null;
        axios
          .post('api/account/change-password', {
            currentPassword: this.resetPassword.currentPassword,
            newPassword: this.resetPassword.newPassword
          })
          .then(() => {
            this.success = 'OK';
            this.error = null;
          })
          .catch(() => {
            this.success = null;
            this.error = 'ERROR';
          });
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/entities.component.ts
import { defineComponent, provide } from 'vue';

import UserService from '@/entities/user/user.service';
import TestEntityService from './test-entity/test-entity.service';
import UserAnswerService from './user-answer/user-answer.service';
// jhipster-needle-add-entity-service-to-entities-component-import - JHipster will import entities services here

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'Entities',
  setup() {
    provide('userService', () => new UserService());
    provide('testEntityService', () => new TestEntityService());
    provide('userAnswerService', () => new UserAnswerService());
    // jhipster-needle-add-entity-service-to-entities-component - JHipster will import entities services here
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/entities-menu.vue
<template>
  <div>
    <b-dropdown-item to="/test-entity">
      <font-awesome-icon icon="asterisk" />
      <span v-text="t$('global.menu.entities.testEntity')"></span>
    </b-dropdown-item>
    <b-dropdown-item to="/user-answer">
      <font-awesome-icon icon="asterisk" />
      <span v-text="t$('global.menu.entities.userAnswer')"></span>
    </b-dropdown-item>
    <!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here -->
  </div>
</template>

<script lang="ts" src="./entities-menu.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/entities.vue
<template>
  <router-view></router-view>
</template>

<script lang="ts" src="./entities.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/entities-menu.component.ts
import { defineComponent } from 'vue';
import { useI18n } from 'vue-i18n';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'EntitiesMenu',
  setup() {
    const i18n = useI18n();
    return {
      t$: i18n.t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer-update.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <form name="editForm" role="form" novalidate v-on:submit.prevent="save()">
        <h2
          id="mmseApp.userAnswer.home.createOrEditLabel"
          data-cy="UserAnswerCreateUpdateHeading"
          v-text="t$('mmseApp.userAnswer.home.createOrEditLabel')"
        ></h2>
        <div>
          <div class="form-group" v-if="userAnswer.id">
            <label for="id" v-text="t$('global.field.id')"></label>
            <input type="text" class="form-control" id="id" name="id" v-model="userAnswer.id" readonly />
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.userAnswer.answerText')"
                   for="user-answer-answerText"></label>
            <input
              type="text"
              class="form-control"
              name="answerText"
              id="user-answer-answerText"
              data-cy="answerText"
              :class="{ valid: !v$.answerText.$invalid, invalid: v$.answerText.$invalid }"
              v-model="v$.answerText.$model"
            />
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.userAnswer.createdAt')"
                   for="user-answer-createdAt"></label>
            <div class="d-flex">
              <input
                id="user-answer-createdAt"
                data-cy="createdAt"
                type="datetime-local"
                class="form-control"
                name="createdAt"
                :class="{ valid: !v$.createdAt.$invalid, invalid: v$.createdAt.$invalid }"
                required
                :value="convertDateTimeFromServer(v$.createdAt.$model)"
                @change="updateInstantField('createdAt', $event)"
              />
            </div>
            <div v-if="v$.createdAt.$anyDirty && v$.createdAt.$invalid">
              <small class="form-text text-danger" v-for="error of v$.createdAt.$errors"
                     :key="error.$uid">{{ error.$message }}</small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.userAnswer.updatedAt')"
                   for="user-answer-updatedAt"></label>
            <div class="d-flex">
              <input
                id="user-answer-updatedAt"
                data-cy="updatedAt"
                type="datetime-local"
                class="form-control"
                name="updatedAt"
                :class="{ valid: !v$.updatedAt.$invalid, invalid: v$.updatedAt.$invalid }"
                :value="convertDateTimeFromServer(v$.updatedAt.$model)"
                @change="updateInstantField('updatedAt', $event)"
              />
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.userAnswer.questionId')"
                   for="user-answer-questionId"></label>
            <select
              class="form-control"
              name="questionId"
              :class="{ valid: !v$.questionId.$invalid, invalid: v$.questionId.$invalid }"
              v-model="v$.questionId.$model"
              id="user-answer-questionId"
              data-cy="questionId"
              required
            >
              <option
                v-for="questionId in questionIdValues"
                :key="questionId"
                v-bind:value="questionId"
                v-bind:label="t$('mmseApp.QuestionId.' + questionId)"
              >
                {{ questionId }}
              </option>
            </select>
            <div v-if="v$.questionId.$anyDirty && v$.questionId.$invalid">
              <small class="form-text text-danger" v-for="error of v$.questionId.$errors"
                     :key="error.$uid">{{ error.$message }}</small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.userAnswer.testEntity')"
                   for="user-answer-testEntity"></label>
            <select
              class="form-control"
              id="user-answer-testEntity"
              data-cy="testEntity"
              name="testEntity"
              v-model="userAnswer.testEntity"
              required
            >
              <option v-if="!userAnswer.testEntity" v-bind:value="null" selected></option>
              <option
                v-bind:value="
                  userAnswer.testEntity && testEntityOption.id === userAnswer.testEntity.id ? userAnswer.testEntity : testEntityOption
                "
                v-for="testEntityOption in testEntities"
                :key="testEntityOption.id"
              >
                {{ testEntityOption.id }}
              </option>
            </select>
          </div>
          <div v-if="v$.testEntity.$anyDirty && v$.testEntity.$invalid">
            <small class="form-text text-danger" v-for="error of v$.testEntity.$errors"
                   :key="error.$uid">{{ error.$message }}</small>
          </div>
        </div>
        <div>
          <button type="button" id="cancel-save" data-cy="entityCreateCancelButton" class="btn btn-secondary"
                  v-on:click="previousState()">
            <font-awesome-icon icon="ban"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.cancel')"></span>
          </button>
          <button
            type="submit"
            id="save-entity"
            data-cy="entityCreateSaveButton"
            :disabled="v$.$invalid || isSaving"
            class="btn btn-primary"
          >
            <font-awesome-icon icon="save"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.save')"></span>
          </button>
        </div>
      </form>
    </div>
  </div>
</template>
<script lang="ts" src="./user-answer-update.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer.service.ts
import axios from 'axios';
import buildPaginationQueryOpts from '@/shared/sort/sorts';
import { IUserAnswer } from '@/shared/model/user-answer.model';

const baseApiUrl = 'api/user-answers';

export default class UserAnswerService {
  public find(id: number): Promise<IUserAnswer> {
    return axios.get<IUserAnswer>(`${baseApiUrl}/${id}`).then(res => res.data);
  }

  public retrieve(paginationQuery?: any): Promise<any> {
    const url = `${baseApiUrl}?${buildPaginationQueryOpts(paginationQuery)}`;
    return axios.get<any>(url);
  }

  public delete(id: number): Promise<any> {
    return axios.delete<any>(`${baseApiUrl}/${id}`);
  }

  public create(entity: IUserAnswer): Promise<IUserAnswer> {
    return axios.post<IUserAnswer>(baseApiUrl, entity).then(res => res.data);
  }

  public update(entity: IUserAnswer): Promise<IUserAnswer> {
    return axios.put<IUserAnswer>(`${baseApiUrl}/${entity.id}`, entity).then(res => res.data);
  }

  public partialUpdate(entity: IUserAnswer): Promise<IUserAnswer> {
    return axios.patch<IUserAnswer>(`${baseApiUrl}/${entity.id}`, entity).then(res => res.data);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer-details.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <div v-if="userAnswer">
        <h2 class="jh-entity-heading" data-cy="userAnswerDetailsHeading">
          <span v-text="t$('mmseApp.userAnswer.detail.title')"></span> {{ userAnswer.id }}
        </h2>
        <dl class="row jh-entity-details">
          <dt>
            <span v-text="t$('mmseApp.userAnswer.answerText')"></span>
          </dt>
          <dd>
            <span>{{ userAnswer.answerText }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.userAnswer.createdAt')"></span>
          </dt>
          <dd>
            <span v-if="userAnswer.createdAt">{{ formatDateLong(userAnswer.createdAt) }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.userAnswer.updatedAt')"></span>
          </dt>
          <dd>
            <span v-if="userAnswer.updatedAt">{{ formatDateLong(userAnswer.updatedAt) }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.userAnswer.questionId')"></span>
          </dt>
          <dd>
            <span v-text="t$('mmseApp.QuestionId.' + userAnswer.questionId)"></span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.userAnswer.testEntity')"></span>
          </dt>
          <dd>
            <div v-if="userAnswer.testEntity">
              <router-link :to="{ name: 'TestEntityView', params: { testEntityId: userAnswer.testEntity.id } }"
              >{{ userAnswer.testEntity.id }}
              </router-link>
            </div>
          </dd>
        </dl>
        <button type="submit" v-on:click.prevent="previousState()" class="btn btn-info"
                data-cy="entityDetailsBackButton">
          <font-awesome-icon icon="arrow-left"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.back')"></span>
        </button>
        <router-link
          v-if="userAnswer.id"
          :to="{ name: 'UserAnswerEdit', params: { userAnswerId: userAnswer.id } }"
          custom
          v-slot="{ navigate }"
        >
          <button @click="navigate" class="btn btn-primary">
            <font-awesome-icon icon="pencil-alt"></font-awesome-icon>&nbsp;<span
            v-text="t$('entity.action.edit')"></span>
          </button>
        </router-link>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./user-answer-details.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer.vue
<template>
  <div>
    <h2 id="page-heading" data-cy="UserAnswerHeading">
      <span v-text="t$('mmseApp.userAnswer.home.title')" id="user-answer-heading"></span>
      <div class="d-flex justify-content-end">
        <button class="btn btn-info mr-2" v-on:click="handleSyncList" :disabled="isFetching">
          <font-awesome-icon icon="sync" :spin="isFetching"></font-awesome-icon>
          <span v-text="t$('mmseApp.userAnswer.home.refreshListLabel')"></span>
        </button>
        <router-link :to="{ name: 'UserAnswerCreate' }" custom v-slot="{ navigate }">
          <button
            @click="navigate"
            id="jh-create-entity"
            data-cy="entityCreateButton"
            class="btn btn-primary jh-create-entity create-user-answer"
          >
            <font-awesome-icon icon="plus"></font-awesome-icon>
            <span v-text="t$('mmseApp.userAnswer.home.createLabel')"></span>
          </button>
        </router-link>
      </div>
    </h2>
    <br />
    <div class="alert alert-warning" v-if="!isFetching && userAnswers && userAnswers.length === 0">
      <span v-text="t$('mmseApp.userAnswer.home.notFound')"></span>
    </div>
    <div class="table-responsive" v-if="userAnswers && userAnswers.length > 0">
      <table class="table table-striped" aria-describedby="userAnswers">
        <thead>
        <tr>
          <th scope="row" v-on:click="changeOrder('id')">
            <span v-text="t$('global.field.id')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse" :field-name="'id'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('answerText')">
            <span v-text="t$('mmseApp.userAnswer.answerText')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'answerText'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('createdAt')">
            <span v-text="t$('mmseApp.userAnswer.createdAt')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'createdAt'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('updatedAt')">
            <span v-text="t$('mmseApp.userAnswer.updatedAt')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'updatedAt'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('questionId')">
            <span v-text="t$('mmseApp.userAnswer.questionId')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'questionId'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('testEntity.id')">
            <span v-text="t$('mmseApp.userAnswer.testEntity')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'testEntity.id'"></jhi-sort-indicator>
          </th>
          <th scope="row"></th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="userAnswer in userAnswers" :key="userAnswer.id" data-cy="entityTable">
          <td>
            <router-link :to="{ name: 'UserAnswerView', params: { userAnswerId: userAnswer.id } }">{{ userAnswer.id }}
            </router-link>
          </td>
          <td>{{ userAnswer.answerText }}</td>
          <td>{{ formatDateShort(userAnswer.createdAt) || '' }}</td>
          <td>{{ formatDateShort(userAnswer.updatedAt) || '' }}</td>
          <td v-text="t$('mmseApp.QuestionId.' + userAnswer.questionId)"></td>
          <td>
            <div v-if="userAnswer.testEntity">
              <router-link :to="{ name: 'TestEntityView', params: { testEntityId: userAnswer.testEntity.id } }"
              >{{ userAnswer.testEntity.id }}
              </router-link>
            </div>
          </td>
          <td class="text-right">
            <div class="btn-group">
              <router-link :to="{ name: 'UserAnswerView', params: { userAnswerId: userAnswer.id } }" custom
                           v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-info btn-sm details" data-cy="entityDetailsButton">
                  <font-awesome-icon icon="eye"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.view')"></span>
                </button>
              </router-link>
              <router-link :to="{ name: 'UserAnswerEdit', params: { userAnswerId: userAnswer.id } }" custom
                           v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-primary btn-sm edit" data-cy="entityEditButton">
                  <font-awesome-icon icon="pencil-alt"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.edit')"></span>
                </button>
              </router-link>
              <b-button
                v-on:click="prepareRemove(userAnswer)"
                variant="danger"
                class="btn btn-sm"
                data-cy="entityDeleteButton"
                v-b-modal.removeEntity
              >
                <font-awesome-icon icon="times"></font-awesome-icon>
                <span class="d-none d-md-inline" v-text="t$('entity.action.delete')"></span>
              </b-button>
            </div>
          </td>
        </tr>
        </tbody>
        <span ref="infiniteScrollEl"></span>
      </table>
    </div>
    <b-modal ref="removeEntity" id="removeEntity">
      <template #modal-title>
        <span id="mmseApp.userAnswer.delete.question" data-cy="userAnswerDeleteDialogHeading"
              v-text="t$('entity.delete.title')"></span>
      </template>
      <div class="modal-body">
        <p id="mmse-delete-userAnswer-heading" v-text="t$('mmseApp.userAnswer.delete.question', { id: removeId })"></p>
      </div>
      <template #modal-footer>
        <div>
          <button type="button" class="btn btn-secondary" v-text="t$('entity.action.cancel')"
                  v-on:click="closeDialog()"></button>
          <button
            type="button"
            class="btn btn-primary"
            id="mmse-confirm-delete-userAnswer"
            data-cy="entityConfirmDeleteButton"
            v-text="t$('entity.action.delete')"
            v-on:click="removeUserAnswer()"
          ></button>
        </div>
      </template>
    </b-modal>
  </div>
</template>

<script lang="ts" src="./user-answer.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer-update.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';
import { useVuelidate } from '@vuelidate/core';

import { useDateFormat, useValidation } from '@/shared/composables';
import { useAlertService } from '@/shared/alert/alert.service';

import TestEntityService from '@/entities/test-entity/test-entity.service';
import { ITestEntity } from '@/shared/model/test-entity.model';
import { IUserAnswer, UserAnswer } from '@/shared/model/user-answer.model';
import UserAnswerService from './user-answer.service';
import { QuestionId } from '@/shared/model/enumerations/question-id.model';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'UserAnswerUpdate',
  setup() {
    const userAnswerService = inject('userAnswerService', () => new UserAnswerService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const userAnswer: Ref<IUserAnswer> = ref(new UserAnswer());
    const testEntityService = inject('testEntityService', () => new TestEntityService());
    const testEntities: Ref<ITestEntity[]> = ref([]);
    const questionIdValues: Ref<string[]> = ref(Object.keys(QuestionId));
    const isSaving = ref(false);
    const currentLanguage = inject('currentLanguage', () => computed(() => navigator.language ?? 'en'), true);

    const route = useRoute();
    const router = useRouter();

    const previousState = () => router.go(-1);

    const retrieveUserAnswer = async userAnswerId => {
      try {
        const res = await userAnswerService().find(userAnswerId);
        res.createdAt = new Date(res.createdAt);
        res.updatedAt = new Date(res.updatedAt);
        userAnswer.value = res;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    if (route.params?.userAnswerId) {
      retrieveUserAnswer(route.params.userAnswerId);
    }

    const initRelationships = () => {
      testEntityService()
        .retrieve()
        .then(res => {
          testEntities.value = res.data;
        });
    };

    initRelationships();

    const { t: t$ } = useI18n();
    const validations = useValidation();
    const validationRules = {
      answerText: {},
      createdAt: {
        required: validations.required(t$('entity.validation.required').toString())
      },
      updatedAt: {},
      questionId: {
        required: validations.required(t$('entity.validation.required').toString())
      },
      testEntity: {
        required: validations.required(t$('entity.validation.required').toString())
      },
    };
    const v$ = useVuelidate(validationRules, userAnswer as any);
    v$.value.$validate();

    return {
      userAnswerService,
      alertService,
      userAnswer,
      previousState,
      questionIdValues,
      isSaving,
      currentLanguage,
      testEntities,
      v$,
      ...useDateFormat({ entityRef: userAnswer }),
      t$
    };
  },
  created(): void {
  },
  methods: {
    save(): void {
      this.isSaving = true;
      if (this.userAnswer.id) {
        this.userAnswerService()
          .update(this.userAnswer)
          .then(param => {
            this.isSaving = false;
            this.previousState();
            this.alertService.showInfo(this.t$('mmseApp.userAnswer.updated', { param: param.id }));
          })
          .catch(error => {
            this.isSaving = false;
            this.alertService.showHttpError(error.response);
          });
      } else {
        this.userAnswerService()
          .create(this.userAnswer)
          .then(param => {
            this.isSaving = false;
            this.previousState();
            this.alertService.showSuccess(this.t$('mmseApp.userAnswer.created', { param: param.id }).toString());
          })
          .catch(error => {
            this.isSaving = false;
            this.alertService.showHttpError(error.response);
          });
      }
    },
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer.component.ts
import { defineComponent, inject, onMounted, ref, Ref, watch } from 'vue';
import { useI18n } from 'vue-i18n';
import { IUserAnswer } from '@/shared/model/user-answer.model';
import useDataUtils from '@/shared/data/data-utils.service';
import { useDateFormat } from '@/shared/composables';
import UserAnswerService from './user-answer.service';
import { useAlertService } from '@/shared/alert/alert.service';
import { usePagination } from '@/shared/composables/pagination';
import { useSorting } from '@/shared/composables/sorting';
import { useInfiniteScroll } from '@/shared/composables/useInfiniteScroll';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'UserAnswer',
  setup() {
    const { t: t$ } = useI18n();
    const dateFormat = useDateFormat();
    const dataUtils = useDataUtils();
    const userAnswerService = inject('userAnswerService', () => new UserAnswerService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const queryCount: Ref<number> = ref(null);
    const totalItems = ref(0);
    const links: Ref<any> = ref({});

    const userAnswers: Ref<IUserAnswer[]> = ref([]);

    const isFetching = ref(false);

    const pagination = usePagination();
    const sorting = useSorting();

    const clear = () => {
      pagination.page.value = 1;
      links.value = {};
      userAnswers.value = [];
    };

    const retrieveUserAnswers = async () => {
      isFetching.value = true;
      try {
        const paginationQuery = {
          page: pagination.page.value - 1,
          size: pagination.itemsPerPage.value,
          sort: sorting.getSort()
        };
        const res = await userAnswerService().retrieve(paginationQuery);
        totalItems.value = Number(res.headers['x-total-count']);
        queryCount.value = totalItems.value;
        links.value = dataUtils.parseLinks(res.headers?.['link']);

        const newData = (res.data ?? []).filter(answer => {
          return !userAnswers.value.some(existing => existing.id === answer.id);
        });

        userAnswers.value.push(...newData);
      } catch (err) {
        alertService.showHttpError(err.response);
      } finally {
        isFetching.value = false;
      }
    };

    const handleSyncList = () => {
      clear();
    };

    onMounted(async () => {
      await retrieveUserAnswers();
    });

    const removeId: Ref<number> = ref(null);
    const removeEntity = ref<any>(null);
    const prepareRemove = (instance: IUserAnswer) => {
      removeId.value = instance.id;
      removeEntity.value.show();
    };
    const closeDialog = () => {
      removeEntity.value.hide();
    };
    const removeUserAnswer = async () => {
      try {
        await userAnswerService().delete(removeId.value);
        const message = t$('mmseApp.userAnswer.deleted', { param: removeId.value }).toString();
        alertService.showInfo(message, { variant: 'danger' });
        removeId.value = null;
        clear();
        closeDialog();
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    watch([sorting.propOrder, sorting.reverse], () => {
      clear();
    });

    watch([userAnswers, pagination.page], async ([data, page], [_prevData, prevPage]) => {
      if (data.length === 0 || page !== prevPage) {
        await retrieveUserAnswers();
      }
    });

    const checkScroll = () => {
      const bottomOfWindow =
        Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop) + window.innerHeight >=
        document.documentElement.offsetHeight - 10;
      if (bottomOfWindow) {
        if (!isFetching.value) {
          pagination.page.value++;
          retrieveUserAnswers();
        }
      }
    };

    useInfiniteScroll(checkScroll);

    return {
      userAnswers,
      handleSyncList,
      isFetching,
      retrieveUserAnswers,
      clear,
      ...dateFormat,
      removeId,
      removeEntity,
      prepareRemove,
      closeDialog,
      removeUserAnswer,
      totalItems,
      queryCount,
      ...pagination,
      ...sorting,
      t$,
      ...dataUtils
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user-answer/user-answer-details.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';

import { useDateFormat } from '@/shared/composables';
import { IUserAnswer } from '@/shared/model/user-answer.model';
import UserAnswerService from './user-answer.service';
import { useAlertService } from '@/shared/alert/alert.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'UserAnswerDetails',
  setup() {
    const dateFormat = useDateFormat();
    const userAnswerService = inject('userAnswerService', () => new UserAnswerService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const route = useRoute();
    const router = useRouter();

    const previousState = () => router.go(-1);
    const userAnswer: Ref<IUserAnswer> = ref({});

    const retrieveUserAnswer = async userAnswerId => {
      try {
        const res = await userAnswerService().find(userAnswerId);
        userAnswer.value = res;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    if (route.params?.userAnswerId) {
      retrieveUserAnswer(route.params.userAnswerId);
    }

    return {
      ...dateFormat,
      alertService,
      userAnswer,

      previousState,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/user/user.service.ts
import axios from 'axios';

const baseApiUrl = 'api/users';

export default class UserService {
  public retrieve(): Promise<any> {
    return axios.get<any>(baseApiUrl);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/question/question.service.ts
import axios from 'axios';
import { IQuestion } from '@/shared/model/question.model';
import { IAnswer } from '@/shared/model/answer.model';
import { QuestionId } from '@/shared/model/enumerations/question-id.model';

export default class QuestionService {
  public getQuestion(): Promise<IQuestion> {
    return axios.get<IQuestion>('api/question').then(res => res.data);
  }

  public submitAnswer(answer: IAnswer): Promise<void> {
    return axios.post<void>('/api/answer', answer);
  }

  public retakeTest(): Promise<IQuestion | string> {
    return axios.post<IQuestion | string>('/api/retake').then(res => res.data);
  }

  public sendAudioToServer(audioBlob: Blob, questionId: QuestionId | undefined): Promise<void> {
    const formData = new FormData();
    formData.append('audio', audioBlob, 'recording.webm');
    formData.append('questionId', questionId as string);

    return axios
      .post('/api/upload-audio', formData)
      .then(() => {
        console.log('Audio uploaded successfully');
      })
      .catch(error => {
        console.error('Error uploading audio:', error);
      });
  }

  public getLastRecordedAudio(questionId: QuestionId): Promise<{ data: Blob; fileName: string }> {
    return axios
      .get('/api/last-recorded-audio', {
        params: { questionId },
        responseType: 'blob'
      })
      .then(res => {
        const contentDisposition = res.headers['content-disposition'];
        const fileName = contentDisposition ? contentDisposition.split('filename=')[1]?.split(';')[0].replace(/"/g, '') : null;
        return { data: res.data, fileName };
      });
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity-update.component.ts
import { computed, defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';
import { useVuelidate } from '@vuelidate/core';

import { useDateFormat, useValidation } from '@/shared/composables';
import { useAlertService } from '@/shared/alert/alert.service';

import UserService from '@/entities/user/user.service';
import { ITestEntity, TestEntity } from '@/shared/model/test-entity.model';
import TestEntityService from './test-entity.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'TestEntityUpdate',
  setup() {
    const testEntityService = inject('testEntityService', () => new TestEntityService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const testEntity: Ref<ITestEntity> = ref(new TestEntity());
    const userService = inject('userService', () => new UserService());
    const users: Ref<Array<any>> = ref([]);
    const isSaving = ref(false);
    const currentLanguage = inject('currentLanguage', () => computed(() => navigator.language ?? 'en'), true);

    const route = useRoute();
    const router = useRouter();

    const previousState = () => router.go(-1);

    const retrieveTestEntity = async testEntityId => {
      try {
        const res = await testEntityService().find(testEntityId);
        res.createdAt = new Date(res.createdAt);
        res.updatedAt = new Date(res.updatedAt);
        testEntity.value = res;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    const initRelationships = async () => {
      try {
        const res = await userService().retrieve();
        users.value = res.data;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    if (route.params?.testEntityId) {
      retrieveTestEntity(route.params.testEntityId);
    }

    initRelationships();

    const { t: t$ } = useI18n();
    const validations = useValidation();
    const validationRules = {
      createdAt: {
        required: validations.required(t$('entity.validation.required').toString())
      },
      updatedAt: {},
      score: {},
      user: {
        required: validations.required(t$('entity.validation.required').toString())
      },
    };
    const v$ = useVuelidate(validationRules, testEntity as any);
    v$.value.$validate();

    return {
      testEntity,
      previousState,
      isSaving,
      currentLanguage,
      users,
      v$,
      ...useDateFormat({ entityRef: testEntity }),
      t$,
      save: async () => {
        isSaving.value = true;
        try {
          let response;
          if (testEntity.value.id) {
            response = await testEntityService().update(testEntity.value);
            alertService.showInfo(t$('mmseApp.testEntity.updated', { param: response.id }));
          } else {
            response = await testEntityService().create(testEntity.value);
            alertService.showSuccess(t$('mmseApp.testEntity.created', { param: response.id }).toString());
          }
          previousState();
        } catch (error) {
          alertService.showHttpError(error.response);
        } finally {
          isSaving.value = false;
        }
      },
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity-details.component.ts
import { defineComponent, inject, ref, Ref } from 'vue';
import { useI18n } from 'vue-i18n';
import { useRoute, useRouter } from 'vue-router';

import { useDateFormat } from '@/shared/composables';
import { ITestEntity } from '@/shared/model/test-entity.model';
import TestEntityService from './test-entity.service';
import { useAlertService } from '@/shared/alert/alert.service';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'TestEntityDetails',
  setup() {
    const dateFormat = useDateFormat();
    const testEntityService = inject('testEntityService', () => new TestEntityService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const route = useRoute();
    const router = useRouter();

    const previousState = () => router.go(-1);
    const testEntity: Ref<ITestEntity> = ref({});

    const retrieveTestEntity = async testEntityId => {
      try {
        const res = await testEntityService().find(testEntityId);
        testEntity.value = res;
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    if (route.params?.testEntityId) {
      retrieveTestEntity(route.params.testEntityId);
    }

    return {
      ...dateFormat,
      alertService,
      testEntity,

      previousState,
      t$: useI18n().t
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity.component.ts
import { defineComponent, inject, onMounted, ref, Ref, watch, watchEffect } from 'vue';
import { useI18n } from 'vue-i18n';
import { ITestEntity } from '@/shared/model/test-entity.model';
import useDataUtils from '@/shared/data/data-utils.service';
import { useDateFormat } from '@/shared/composables';
import TestEntityService from './test-entity.service';
import { useAlertService } from '@/shared/alert/alert.service';
import { usePagination } from '@/shared/composables/pagination';
import { useSorting } from '@/shared/composables/sorting';
import { useInfiniteScroll } from '@/shared/composables/infinite-scroll';

export default defineComponent({
  compatConfig: { MODE: 3 },
  name: 'TestEntity',
  setup() {
    const { t: t$ } = useI18n();
    const dateFormat = useDateFormat();
    const dataUtils = useDataUtils();
    const testEntityService = inject('testEntityService', () => new TestEntityService());
    const alertService = inject('alertService', () => useAlertService(), true);

    const queryCount: Ref<number> = ref(null);
    const totalItems = ref(0);
    const links: Ref<any> = ref({});

    const testEntities: Ref<ITestEntity[]> = ref([]);

    const isFetching = ref(false);

    // Use the composables
    const pagination = usePagination();
    const sorting = useSorting();
    const infiniteScroll = useInfiniteScroll(() => {
      if (!isFetching.value) {
        pagination.page.value++;
      }
    });

    const clear = () => {
      pagination.page.value = 1;
      links.value = {};
      testEntities.value = [];
    };

    const retrieveTestEntitys = async () => {
      isFetching.value = true;
      try {
        const paginationQuery = {
          page: pagination.page.value - 1,
          size: pagination.itemsPerPage.value,
          sort: sorting.getSort()
        };
        const res = await testEntityService().retrieve(paginationQuery);
        totalItems.value = Number(res.headers['x-total-count']);
        queryCount.value = totalItems.value;
        links.value = dataUtils.parseLinks(res.headers?.['link']);
        testEntities.value.push(...(res.data ?? []));
      } catch (err) {
        alertService.showHttpError(err.response);
      } finally {
        isFetching.value = false;
      }
    };

    const handleSyncList = () => {
      clear();
    };

    onMounted(async () => {
      await retrieveTestEntitys();
    });

    const removeId: Ref<number> = ref(null);
    const removeEntity = ref<any>(null);
    const prepareRemove = (instance: ITestEntity) => {
      removeId.value = instance.id;
      removeEntity.value.show();
    };
    const closeDialog = () => {
      removeEntity.value.hide();
    };
    const removeTestEntity = async () => {
      try {
        await testEntityService().delete(removeId.value);
        const message = t$('mmseApp.testEntity.deleted', { param: removeId.value }).toString();
        alertService.showInfo(message, { variant: 'danger' });
        removeId.value = null;
        clear();
        closeDialog();
      } catch (error) {
        alertService.showHttpError(error.response);
      }
    };

    // Whenever order changes, reset the pagination
    watch([sorting.propOrder, sorting.reverse], () => {
      clear();
    });

    // Whenever the data resets or page changes, switch to the new page.
    watch([testEntities, pagination.page], async ([data, page], [_prevData, prevPage]) => {
      if (data.length === 0 || page !== prevPage) {
        await retrieveTestEntitys();
      }
    });

    watchEffect(() => {
      if (links.value.next) {
        infiniteScroll.intersectionObserver.resume();
      } else if (infiniteScroll.intersectionObserver.isActive) {
        infiniteScroll.intersectionObserver.pause();
      }
    });

    return {
      testEntities,
      handleSyncList,
      isFetching,
      retrieveTestEntitys,
      clear,
      ...dateFormat,
      removeId,
      removeEntity,
      prepareRemove,
      closeDialog,
      removeTestEntity,
      totalItems,
      queryCount,
      ...pagination,
      ...sorting,
      ...infiniteScroll,
      t$,
      ...dataUtils
    };
  },
});


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity-update.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <form name="editForm" role="form" novalidate v-on:submit.prevent="save()">
        <h2
          id="mmseApp.testEntity.home.createOrEditLabel"
          data-cy="TestEntityCreateUpdateHeading"
          v-text="t$('mmseApp.testEntity.home.createOrEditLabel')"
        ></h2>
        <div>
          <div class="form-group" v-if="testEntity.id">
            <label for="id" v-text="t$('global.field.id')"></label>
            <input type="text" class="form-control" id="id" name="id" v-model="testEntity.id" readonly />
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.testEntity.createdAt')"
                   for="test-entity-createdAt"></label>
            <div class="d-flex">
              <input
                id="test-entity-createdAt"
                data-cy="createdAt"
                type="datetime-local"
                class="form-control"
                name="createdAt"
                :class="{ valid: !v$.createdAt.$invalid, invalid: v$.createdAt.$invalid }"
                required
                :value="convertDateTimeFromServer(v$.createdAt.$model)"
                @change="updateInstantField('createdAt', $event)"
              />
            </div>
            <div v-if="v$.createdAt.$anyDirty && v$.createdAt.$invalid">
              <small class="form-text text-danger" v-for="error of v$.createdAt.$errors"
                     :key="error.$uid">{{ error.$message }}</small>
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.testEntity.updatedAt')"
                   for="test-entity-updatedAt"></label>
            <div class="d-flex">
              <input
                id="test-entity-updatedAt"
                data-cy="updatedAt"
                type="datetime-local"
                class="form-control"
                name="updatedAt"
                :class="{ valid: !v$.updatedAt.$invalid, invalid: v$.updatedAt.$invalid }"
                :value="convertDateTimeFromServer(v$.updatedAt.$model)"
                @change="updateInstantField('updatedAt', $event)"
              />
            </div>
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.testEntity.score')" for="test-entity-score"></label>
            <input
              type="number"
              class="form-control"
              name="score"
              id="test-entity-score"
              data-cy="score"
              :class="{ valid: !v$.score.$invalid, invalid: v$.score.$invalid }"
              v-model.number="v$.score.$model"
            />
          </div>
          <div class="form-group">
            <label class="form-control-label" v-text="t$('mmseApp.testEntity.user')" for="test-entity-user"></label>
            <select class="form-control" id="test-entity-user" data-cy="user" name="user" v-model="testEntity.user"
                    required>
              <option v-if="!testEntity.user" v-bind:value="null" selected></option>
              <option
                v-bind:value="testEntity.user && userOption.id === testEntity.user.id ? testEntity.user : userOption"
                v-for="userOption in users"
                :key="userOption.id"
              >
                {{ userOption.login }}
              </option>
            </select>
          </div>
          <div v-if="v$.user.$anyDirty && v$.user.$invalid">
            <small class="form-text text-danger" v-for="error of v$.user.$errors" :key="error.$uid">{{ error.$message
              }}</small>
          </div>
        </div>
        <div>
          <button type="button" id="cancel-save" data-cy="entityCreateCancelButton" class="btn btn-secondary"
                  v-on:click="previousState()">
            <font-awesome-icon icon="ban"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.cancel')"></span>
          </button>
          <button
            type="submit"
            id="save-entity"
            data-cy="entityCreateSaveButton"
            :disabled="v$.$invalid || isSaving"
            class="btn btn-primary"
          >
            <font-awesome-icon icon="save"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.save')"></span>
          </button>
        </div>
      </form>
    </div>
  </div>
</template>
<script lang="ts" src="./test-entity-update.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity.service.ts
import axios from 'axios';
import buildPaginationQueryOpts from '@/shared/sort/sorts';
import { ITestEntity } from '@/shared/model/test-entity.model';

const baseApiUrl = 'api/test-entities';

export default class TestEntityService {
  public find(id: number): Promise<ITestEntity> {
    return axios.get<ITestEntity>(`${baseApiUrl}/${id}`).then(res => res.data);
  }

  public retrieve(paginationQuery?: any): Promise<any> {
    const url = `${baseApiUrl}?${buildPaginationQueryOpts(paginationQuery)}`;
    return axios.get<any>(url);
  }

  public delete(id: number): Promise<any> {
    return axios.delete<any>(`${baseApiUrl}/${id}`);
  }

  public create(entity: ITestEntity): Promise<ITestEntity> {
    return axios.post<ITestEntity>(baseApiUrl, entity).then(res => res.data);
  }

  public update(entity: ITestEntity): Promise<ITestEntity> {
    return axios.put<ITestEntity>(`${baseApiUrl}/${entity.id}`, entity).then(res => res.data);
  }

  public partialUpdate(entity: ITestEntity): Promise<ITestEntity> {
    return axios.patch<ITestEntity>(`${baseApiUrl}/${entity.id}`, entity).then(res => res.data);
  }
}


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity-details.vue
<template>
  <div class="row justify-content-center">
    <div class="col-8">
      <div v-if="testEntity">
        <h2 class="jh-entity-heading" data-cy="testEntityDetailsHeading">
          <span v-text="t$('mmseApp.testEntity.detail.title')"></span> {{ testEntity.id }}
        </h2>
        <dl class="row jh-entity-details">
          <dt>
            <span v-text="t$('mmseApp.testEntity.createdAt')"></span>
          </dt>
          <dd>
            <span v-if="testEntity.createdAt">{{ formatDateLong(testEntity.createdAt) }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.testEntity.updatedAt')"></span>
          </dt>
          <dd>
            <span v-if="testEntity.updatedAt">{{ formatDateLong(testEntity.updatedAt) }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.testEntity.score')"></span>
          </dt>
          <dd>
            <span>{{ testEntity.score }}</span>
          </dd>
          <dt>
            <span v-text="t$('mmseApp.testEntity.user')"></span>
          </dt>
          <dd>
            {{ testEntity.user ? testEntity.user.login : '' }}
          </dd>
        </dl>
        <button type="submit" v-on:click.prevent="previousState()" class="btn btn-info"
                data-cy="entityDetailsBackButton">
          <font-awesome-icon icon="arrow-left"></font-awesome-icon>&nbsp;<span v-text="t$('entity.action.back')"></span>
        </button>
        <router-link
          v-if="testEntity.id"
          :to="{ name: 'TestEntityEdit', params: { testEntityId: testEntity.id } }"
          custom
          v-slot="{ navigate }"
        >
          <button @click="navigate" class="btn btn-primary">
            <font-awesome-icon icon="pencil-alt"></font-awesome-icon>&nbsp;<span
            v-text="t$('entity.action.edit')"></span>
          </button>
        </router-link>
      </div>
    </div>
  </div>
</template>

<script lang="ts" src="./test-entity-details.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/entities/test-entity/test-entity.vue
<template>
  <div>
    <h2 id="page-heading" data-cy="TestEntityHeading">
      <span v-text="t$('mmseApp.testEntity.home.title')" id="test-entity-heading"></span>
      <div class="d-flex justify-content-end">
        <button class="btn btn-info mr-2" v-on:click="handleSyncList" :disabled="isFetching">
          <font-awesome-icon icon="sync" :spin="isFetching"></font-awesome-icon>
          <span v-text="t$('mmseApp.testEntity.home.refreshListLabel')"></span>
        </button>
        <router-link :to="{ name: 'TestEntityCreate' }" custom v-slot="{ navigate }">
          <button
            @click="navigate"
            id="jh-create-entity"
            data-cy="entityCreateButton"
            class="btn btn-primary jh-create-entity create-test-entity"
          >
            <font-awesome-icon icon="plus"></font-awesome-icon>
            <span v-text="t$('mmseApp.testEntity.home.createLabel')"></span>
          </button>
        </router-link>
      </div>
    </h2>
    <br />
    <div class="alert alert-warning" v-if="!isFetching && testEntities && testEntities.length === 0">
      <span v-text="t$('mmseApp.testEntity.home.notFound')"></span>
    </div>
    <div class="table-responsive" v-if="testEntities && testEntities.length > 0">
      <table class="table table-striped" aria-describedby="testEntities">
        <thead>
        <tr>
          <th scope="row" v-on:click="changeOrder('id')">
            <span v-text="t$('global.field.id')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse" :field-name="'id'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('createdAt')">
            <span v-text="t$('mmseApp.testEntity.createdAt')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'createdAt'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('updatedAt')">
            <span v-text="t$('mmseApp.testEntity.updatedAt')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'updatedAt'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('score')">
            <span v-text="t$('mmseApp.testEntity.score')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'score'"></jhi-sort-indicator>
          </th>
          <th scope="row" v-on:click="changeOrder('user.login')">
            <span v-text="t$('mmseApp.testEntity.user')"></span>
            <jhi-sort-indicator :current-order="propOrder" :reverse="reverse"
                                :field-name="'user.login'"></jhi-sort-indicator>
          </th>
          <th scope="row"></th>
        </tr>
        </thead>
        <tbody>
        <tr v-for="testEntity in testEntities" :key="testEntity.id" data-cy="entityTable">
          <td>
            <router-link :to="{ name: 'TestEntityView', params: { testEntityId: testEntity.id } }">{{ testEntity.id }}
            </router-link>
          </td>
          <td>{{ formatDateShort(testEntity.createdAt) || '' }}</td>
          <td>{{ formatDateShort(testEntity.updatedAt) || '' }}</td>
          <td>{{ testEntity.score }}</td>
          <td>
            {{ testEntity.user ? testEntity.user.login : '' }}
          </td>
          <td class="text-right">
            <div class="btn-group">
              <router-link :to="{ name: 'TestEntityView', params: { testEntityId: testEntity.id } }" custom
                           v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-info btn-sm details" data-cy="entityDetailsButton">
                  <font-awesome-icon icon="eye"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.view')"></span>
                </button>
              </router-link>
              <router-link :to="{ name: 'TestEntityEdit', params: { testEntityId: testEntity.id } }" custom
                           v-slot="{ navigate }">
                <button @click="navigate" class="btn btn-primary btn-sm edit" data-cy="entityEditButton">
                  <font-awesome-icon icon="pencil-alt"></font-awesome-icon>
                  <span class="d-none d-md-inline" v-text="t$('entity.action.edit')"></span>
                </button>
              </router-link>
              <b-button
                v-on:click="prepareRemove(testEntity)"
                variant="danger"
                class="btn btn-sm"
                data-cy="entityDeleteButton"
                v-b-modal.removeEntity
              >
                <font-awesome-icon icon="times"></font-awesome-icon>
                <span class="d-none d-md-inline" v-text="t$('entity.action.delete')"></span>
              </b-button>
            </div>
          </td>
        </tr>
        </tbody>
        <span ref="infiniteScrollEl"></span>
      </table>
    </div>
    <b-modal ref="removeEntity" id="removeEntity">
      <template #modal-title>
        <span id="mmseApp.testEntity.delete.question" data-cy="testEntityDeleteDialogHeading"
              v-text="t$('entity.delete.title')"></span>
      </template>
      <div class="modal-body">
        <p id="mmse-delete-testEntity-heading" v-text="t$('mmseApp.testEntity.delete.question', { id: removeId })"></p>
      </div>
      <template #modal-footer>
        <div>
          <button type="button" class="btn btn-secondary" v-text="t$('entity.action.cancel')"
                  v-on:click="closeDialog()"></button>
          <button
            type="button"
            class="btn btn-primary"
            id="mmse-confirm-delete-testEntity"
            data-cy="entityConfirmDeleteButton"
            v-text="t$('entity.action.delete')"
            v-on:click="removeTestEntity()"
          ></button>
        </div>
      </template>
    </b-modal>
  </div>
</template>

<script lang="ts" src="./test-entity.component.ts"></script>


File: /Users/tenman/MMSE-App/src/main/webapp/app/router/account.ts
import { Authority } from '@/shared/security/authority';

const Register = () => import('@/account/register/register.vue');
const Activate = () => import('@/account/activate/activate.vue');
const ResetPasswordInit = () => import('@/account/reset-password/init/reset-password-init.vue');
const ResetPasswordFinish = () => import('@/account/reset-password/finish/reset-password-finish.vue');
const ChangePassword = () => import('@/account/change-password/change-password.vue');
const Settings = () => import('@/account/settings/settings.vue');

export default [
  {
    path: '/register',
    name: 'Register',
    component: Register
  },
  {
    path: '/account/activate',
    name: 'Activate',
    component: Activate
  },
  {
    path: '/account/reset/request',
    name: 'ResetPasswordInit',
    component: ResetPasswordInit
  },
  {
    path: '/account/reset/finish',
    name: 'ResetPasswordFinish',
    component: ResetPasswordFinish
  },
  {
    path: '/account/password',
    name: 'ChangePassword',
    component: ChangePassword,
    meta: { authorities: [Authority.USER] }
  },
  {
    path: '/account/settings',
    name: 'Settings',
    component: Settings,
    meta: { authorities: [Authority.USER] }
  },
];


File: /Users/tenman/MMSE-App/src/main/webapp/app/router/entities.ts
import { Authority } from '@/shared/security/authority';
/* tslint:disable */
// prettier-ignore
const Entities = () => import("@/entities/entities.vue");

const TestEntity = () => import('@/entities/test-entity/test-entity.vue');
const TestEntityUpdate = () => import('@/entities/test-entity/test-entity-update.vue');
const TestEntityDetails = () => import('@/entities/test-entity/test-entity-details.vue');

const UserAnswer = () => import('@/entities/user-answer/user-answer.vue');
const UserAnswerUpdate = () => import('@/entities/user-answer/user-answer-update.vue');
const UserAnswerDetails = () => import('@/entities/user-answer/user-answer-details.vue');

// jhipster-needle-add-entity-to-router-import - JHipster will import entities to the router here

export default {
  path: '/',
  component: Entities,
  children: [
    {
      path: 'test-entity',
      name: 'TestEntity',
      component: TestEntity,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'test-entity/new',
      name: 'TestEntityCreate',
      component: TestEntityUpdate,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'test-entity/:testEntityId/edit',
      name: 'TestEntityEdit',
      component: TestEntityUpdate,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'test-entity/:testEntityId/view',
      name: 'TestEntityView',
      component: TestEntityDetails,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'user-answer',
      name: 'UserAnswer',
      component: UserAnswer,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'user-answer/new',
      name: 'UserAnswerCreate',
      component: UserAnswerUpdate,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'user-answer/:userAnswerId/edit',
      name: 'UserAnswerEdit',
      component: UserAnswerUpdate,
      meta: { authorities: [Authority.USER] }
    },
    {
      path: 'user-answer/:userAnswerId/view',
      name: 'UserAnswerView',
      component: UserAnswerDetails,
      meta: { authorities: [Authority.USER] }
    },
    // jhipster-needle-add-entity-to-router - JHipster will add entities to the router here
  ],
};


File: /Users/tenman/MMSE-App/src/main/webapp/app/router/admin.ts
import { Authority } from '@/shared/security/authority';

const MmseUserManagementComponent = () => import('@/admin/user-management/user-management.vue');
const MmseUserManagementViewComponent = () => import('@/admin/user-management/user-management-view.vue');
const MmseUserManagementEditComponent = () => import('@/admin/user-management/user-management-edit.vue');
const MmseDocsComponent = () => import('@/admin/docs/docs.vue');
const MmseConfigurationComponent = () => import('@/admin/configuration/configuration.vue');
const MmseHealthComponent = () => import('@/admin/health/health.vue');
const MmseLogsComponent = () => import('@/admin/logs/logs.vue');
const MmseMetricsComponent = () => import('@/admin/metrics/metrics.vue');

export default [
  {
    path: '/admin/user-management',
    name: 'MmseUser',
    component: MmseUserManagementComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/user-management/new',
    name: 'MmseUserCreate',
    component: MmseUserManagementEditComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/user-management/:userId/edit',
    name: 'MmseUserEdit',
    component: MmseUserManagementEditComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/user-management/:userId/view',
    name: 'MmseUserView',
    component: MmseUserManagementViewComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/docs',
    name: 'MmseDocsComponent',
    component: MmseDocsComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/health',
    name: 'MmseHealthComponent',
    component: MmseHealthComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/logs',
    name: 'MmseLogsComponent',
    component: MmseLogsComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/metrics',
    name: 'MmseMetricsComponent',
    component: MmseMetricsComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
  {
    path: '/admin/configuration',
    name: 'MmseConfigurationComponent',
    component: MmseConfigurationComponent,
    meta: { authorities: [Authority.ADMIN] }
  },
];


File: /Users/tenman/MMSE-App/src/main/webapp/app/router/pages.ts
/* tslint:disable */
// prettier-ignore

// jhipster-needle-add-entity-to-router-import - JHipster will import entities to the router here

export default [
  // jhipster-needle-add-entity-to-router - JHipster will add entities to the router here
];


File: /Users/tenman/MMSE-App/src/main/webapp/app/router/index.ts
import { createRouter as createVueRouter, createWebHistory } from 'vue-router';
import account from '@/router/account';
import admin from '@/router/admin';
import entities from '@/router/entities';
import pages from '@/router/pages';

const Home = () => import('@/core/home/home.vue');
const Error = () => import('@/core/error/error.vue');

export const createRouter = () =>
  createVueRouter({
    history: createWebHistory(),
    routes: [
      {
        path: '/',
        name: 'Home',
        component: Home
      },
      {
        path: '/forbidden',
        name: 'Forbidden',
        component: Error,
        meta: { error403: true }
      },
      {
        path: '/not-found',
        name: 'NotFound',
        component: Error,
        meta: { error404: true }
      },
      ...account,
      ...admin,
      entities,
      ...pages
    ],
  });

const router = createRouter();

router.beforeResolve(async (to, from, next) => {
  if (!to.matched.length) {
    next({ path: '/not-found' });
    return;
  }
  next();
});

export default router;


